%type: module

module Chart():
begin
  ChartEL := [];
  Chart_B_tick := -1;
  Chart_st := "Chart_A";
  Chart_A_tick := 1;
  s := "en_A";
  log("en_A" + "\n");
  x := 1;
  (
    Chart_ret := 0;
    if Chart_st == "Chart_A" then
      Chart_A_done := 0;
      Chart_A_tick == 4 && x == 4 -> (
        Chart_st == "Chart_A" -> (
          Chart_A_tick := -1;
          Chart_st := "Chart_B";
          Chart_B_tick := 1;
          s := "en_B";
          log("en_B" + "\n");
          Chart_A_done := 1
        )
      );
      Chart_st == "Chart_A" && Chart_A_done == 0 -> (
        s := "du_A";
        log("du_A" + "\n");
        x := x + 1;
        Chart_A_tick != -1 -> Chart_A_tick := Chart_A_tick + 1
      );
      Chart_ret := Chart_A_done
    elif Chart_st == "Chart_B" then
      Chart_B_done := 0;
      Chart_B_tick < 4 -> (
        Chart_st == "Chart_B" -> (
          Chart_B_tick := -1;
          Chart_st := "Chart_A";
          Chart_A_tick := 1;
          s := "en_A";
          log("en_A" + "\n");
          x := 1;
          Chart_B_done := 1
        )
      );
      Chart_st == "Chart_B" && Chart_B_done == 0 -> (
        s := "du_B";
        log("du_B" + "\n");
        Chart_B_tick != -1 -> Chart_B_tick := Chart_B_tick + 1
      );
      Chart_ret := Chart_B_done
    else
      skip
    endif;
    wait(0.1)
  )**
end
endmodule
system
Chart = Chart()
endsystem
