velocity_control ::= @PD0 || @PC0 || @PC1 || @PC2 || @PC3 || @PC4
PD0 ::= t := 0; x25 := 2; x0 := 3; x16 := 3; x14 := 2; x20 := 1000; x7 := 2; (t%0.1 == 0 -> (ch_laser_error_error_0?laser_error_error; ch_obstacle_camera_image_0?obstacle_camera_image; ch_obstacle_camera_image_1?obstacle_camera_image; ch_obstacle_camera_image_2?obstacle_camera_image; ch_obstacle_radar_position_0?obstacle_radar_position; ch_obstacle_radar_position_1?obstacle_radar_position; ch_obstacle_radar_position_2?obstacle_radar_position; ch_wheel_error_error_0?wheel_error_error; ch_x1_0?x1; ch_x1_2?x1; x21 := wheel_error_error+x1; x2 := laser_error_error+x1; if obstacle_camera_image > 0 then x3 := obstacle_camera_image else x3 := obstacle_radar_position endif; if obstacle_radar_position > 0 then x4 := obstacle_radar_position else x4 := obstacle_camera_image endif); t%0.1 == 0 -> (ch_laser_error_valid_0?laser_error_valid; ch_wheel_error_valid_0?wheel_error_valid; if laser_error_valid > 0 then x23 := x2 else x23 := x21 endif; if wheel_error_valid > 0 then x22 := x21 else x22 := x2 endif; x5 := min(x3, x4)); t%0.1 == 0 -> (x24 := x22+x23; if x5 < 0 then x6 := 0 elif x5 > 100 then x6 := 100 else x6 := x5 endif); t%0.1 == 0 -> (x11 := x24/x25; if x6 != 0 then x9 := x6 else x9 := x20 endif); t%0.1 == 0 -> (ch_x8_0?x8; x13 := -x11+x0; x10 := x8-x9); t%0.1 == 0 -> (x12 := 1/x7/x10*x11*x11; x17 := x13/x16); t%0.1 == 0 -> if x6 != 0 then x15 := x12 else x15 := x14 endif; t%0.1 == 0 -> x18 := min(x15, x17); t%0.1 == 0 -> (if x18 < -2 then x19 := -2 elif x18 > 2 then x19 := 2 else x19 := x18 endif; ch_x19_0!x19); wait(0.1); t := t+0.1)**
PC0 ::= t := 0.0; wheel_error_valid := -1.0; wheel_error_error := 0.0; signals := [[4.0, -1.0, 0.0],[6.0, -1.0, 0.0],[20.0, -1.0, 0.0]]; num := 2; (ch_wheel_error_error_0!wheel_error_error --> num := num-1 $ ch_wheel_error_valid_0!wheel_error_valid --> num := num-1){num > 0}**; skip; (next_t_datas := bottom(signals); signals := get(signals); next_t := bottom(next_t_datas); next_datas := get(next_t_datas); next_wheel_error_valid := bottom(next_datas); next_datas := get(next_datas); next_wheel_error_error := bottom(next_datas); next_datas := get(next_datas); t == next_t -> (wheel_error_valid := next_wheel_error_valid; wheel_error_error := next_wheel_error_error; next_t_datas := bottom(signals); signals := get(signals); next_t := bottom(next_t_datas); next_datas := get(next_t_datas); next_wheel_error_valid := bottom(next_datas); next_datas := get(next_datas); next_wheel_error_error := bottom(next_datas); next_datas := get(next_datas)); slope_wheel_error_valid := (next_wheel_error_valid-wheel_error_valid)/(next_t-t); slope_wheel_error_error := (next_wheel_error_error-wheel_error_error)/(next_t-t); (<wheel_error_valid_dot = slope_wheel_error_valid, wheel_error_error_dot = slope_wheel_error_error, t_dot = 1 & t < next_t> |> [] (ch_wheel_error_error_0!wheel_error_error --> skip, ch_wheel_error_valid_0!wheel_error_valid --> skip)){t < next_t}**){len(signals) > 0}**
PC1 ::= x8 := 0; x1 := 0; num := 3; (ch_x1_0!x1 --> num := num-1 $ ch_x1_2!x1 --> num := num-1 $ ch_x8_0!x8 --> num := num-1){num > 0}**; ch_x19_0?x19; (<x8_dot = x1, x1_dot = x19 & true> |> [] (ch_x19_0?x19 --> skip, ch_x1_0!x1 --> skip, ch_x1_2!x1 --> skip, ch_x8_0!x8 --> skip))**
PC2 ::= t := 0.0; laser_error_valid := 1.0; laser_error_error := 0.0; signals := [[4.0, 1.0, 0.0],[6.0, 1.0, 0.0],[20.0, 1.0, 0.0]]; num := 2; (ch_laser_error_error_0!laser_error_error --> num := num-1 $ ch_laser_error_valid_0!laser_error_valid --> num := num-1){num > 0}**; skip; (next_t_datas := bottom(signals); signals := get(signals); next_t := bottom(next_t_datas); next_datas := get(next_t_datas); next_laser_error_valid := bottom(next_datas); next_datas := get(next_datas); next_laser_error_error := bottom(next_datas); next_datas := get(next_datas); t == next_t -> (laser_error_valid := next_laser_error_valid; laser_error_error := next_laser_error_error; next_t_datas := bottom(signals); signals := get(signals); next_t := bottom(next_t_datas); next_datas := get(next_t_datas); next_laser_error_valid := bottom(next_datas); next_datas := get(next_datas); next_laser_error_error := bottom(next_datas); next_datas := get(next_datas)); slope_laser_error_valid := (next_laser_error_valid-laser_error_valid)/(next_t-t); slope_laser_error_error := (next_laser_error_error-laser_error_error)/(next_t-t); (<laser_error_valid_dot = slope_laser_error_valid, laser_error_error_dot = slope_laser_error_error, t_dot = 1 & t < next_t> |> [] (ch_laser_error_error_0!laser_error_error --> skip, ch_laser_error_valid_0!laser_error_valid --> skip)){t < next_t}**){len(signals) > 0}**
PC3 ::= t := 0.0; obstacle_radar_position := 0.0; signals := [[4.0, 0.0],[4.0, 10.0],[6.0, 10.0],[10.0, 20.0],[10.0, 0.0],[20.0, 0.0]]; num := 3; (ch_obstacle_radar_position_0!obstacle_radar_position --> num := num-1 $ ch_obstacle_radar_position_1!obstacle_radar_position --> num := num-1 $ ch_obstacle_radar_position_2!obstacle_radar_position --> num := num-1){num > 0}**; skip; (next_t_datas := bottom(signals); signals := get(signals); next_t := bottom(next_t_datas); next_datas := get(next_t_datas); next_obstacle_radar_position := bottom(next_datas); next_datas := get(next_datas); t == next_t -> (obstacle_radar_position := next_obstacle_radar_position; next_t_datas := bottom(signals); signals := get(signals); next_t := bottom(next_t_datas); next_datas := get(next_t_datas); next_obstacle_radar_position := bottom(next_datas); next_datas := get(next_datas)); slope_obstacle_radar_position := (next_obstacle_radar_position-obstacle_radar_position)/(next_t-t); (<obstacle_radar_position_dot = slope_obstacle_radar_position, t_dot = 1 & t < next_t> |> [] (ch_obstacle_radar_position_0!obstacle_radar_position --> skip, ch_obstacle_radar_position_1!obstacle_radar_position --> skip, ch_obstacle_radar_position_2!obstacle_radar_position --> skip)){t < next_t}**){len(signals) > 0}**
PC4 ::= t := 0.0; obstacle_camera_image := -1.0; signals := [[4.0, -1.0],[6.0, -1.0],[20.0, -1.0]]; num := 3; (ch_obstacle_camera_image_0!obstacle_camera_image --> num := num-1 $ ch_obstacle_camera_image_1!obstacle_camera_image --> num := num-1 $ ch_obstacle_camera_image_2!obstacle_camera_image --> num := num-1){num > 0}**; skip; (next_t_datas := bottom(signals); signals := get(signals); next_t := bottom(next_t_datas); next_datas := get(next_t_datas); next_obstacle_camera_image := bottom(next_datas); next_datas := get(next_datas); t == next_t -> (obstacle_camera_image := next_obstacle_camera_image; next_t_datas := bottom(signals); signals := get(signals); next_t := bottom(next_t_datas); next_datas := get(next_t_datas); next_obstacle_camera_image := bottom(next_datas); next_datas := get(next_datas)); slope_obstacle_camera_image := (next_obstacle_camera_image-obstacle_camera_image)/(next_t-t); (<obstacle_camera_image_dot = slope_obstacle_camera_image, t_dot = 1 & t < next_t> |> [] (ch_obstacle_camera_image_0!obstacle_camera_image --> skip, ch_obstacle_camera_image_1!obstacle_camera_image --> skip, ch_obstacle_camera_image_2!obstacle_camera_image --> skip)){t < next_t}**){len(signals) > 0}**
