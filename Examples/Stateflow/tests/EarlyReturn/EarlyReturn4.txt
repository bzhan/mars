%type: module

module Chart():
procedure exec_Chart begin
  Chart_ret := 0;
  if Chart_A_st == "Chart_A_A1" then
    Chart_A_A1_done := 0;
    ChartEL != [] && top(ChartEL) == "E" -> (
      Chart_A_st == "Chart_A_A1" -> (
        Chart_A_st := "Chart_A_A3";
        s := "en_A3";
        log("en_A3" + "\n");
        Chart_ret := 1;
        Chart_A_A1_done := 1
      )
    );
    Chart_A_st == "Chart_A_A1" && Chart_A_A1_done == 0 -> (
      s := "ca";
      log("ca" + "\n");
      Chart_A_st == "Chart_A_A1" -> (
        Chart_A_st := "";
        ChartEL := push(ChartEL,"E");
        @exec_Chart;
        ChartEL := pop(ChartEL);
        Chart_A_st == "" -> (
          s := "ta";
          log("ta" + "\n")
        );
        Chart_A_st == "" -> (
          Chart_A_st := "Chart_A_A2";
          s := "en_A2";
          log("en_A2" + "\n")
        );
        Chart_A_A1_done := 1
      )
    );
    Chart_ret := Chart_A_A1_done
  elif Chart_A_st == "Chart_A_A2" then
    Chart_ret := 0
  elif Chart_A_st == "Chart_A_A3" then
    Chart_ret := 0
  else
    skip
  endif
end

begin
  ChartEL := [];
  Chart_A_st := "Chart_A_A1";
  (
    @exec_Chart;
    wait(0.1)
  )**
end
endmodule
system
Chart = Chart()
endsystem
