myprocess ::= @clientT || @serverT || @Comms_myprocess
Comms_myprocess ::= @myprocess_Conn_0 || @myprocess_Conn_2 || @myprocess_Conn_3 || @myprocess_Conn_7 || @myprocess_Conn_1
myprocess_Conn_0 ::= (clientT_non_blocking_call?; serverT_aser!)**
myprocess_Conn_2 ::= (clientT_blocking_call?; serverT_hser!)**
myprocess_Conn_3 ::= (clientT_data_blocking?x; serverT_data_hser!x)**
myprocess_Conn_7 ::= (serverT_data_op2?x; clientT_data_blocking_back!x)**
myprocess_Conn_1 ::= (myprocess_clientT_result?x)**
clientT ::= @ACT_clientT || @COM_clientT || @ANNEX_clientT
ACT_clientT ::= (act_clientT!; wait(0.02))**
COM_clientT ::= state := "dispatch"; (if state == "dispatch" then act_clientT?; t := 0; InitFlag := 0; c:=0; state := "ready" elif state == "ready" then ready_clientT!; <t_dot = 1 & t < 0.02> |> [] (run_clientT? --> state := "running"); t == 0.02 -> state := "dispatch" elif state == "running" then InitFlag == 0 -> (run_Annex_clientT!; <t_dot = 1, c_dot = 1 & c < 0.006 && t < 0.02> |> [] (busy_Annex_clientT? --> state := "ready", complete_Annex_clientT? --> clientT_annex_result?result; skip; InitFlag := 1, applyResource_clientT? --> state := "await"; free!)); InitFlag == 1 -> (<t_dot = 1, c_dot = 1 & c < 0.006 && t < 0.02> |> [] (busy_clientT? --> state := "ready"); t == 0.02 -> (free!; state := "dispatch"); c == 0.006 -> (myprocess_clientT_result!result; free!; state := "dispatch")) else <t_dot = 1 & t < 0.02> |> [] (haveResource_clientT? --> state := "ready"); t == 0.02 -> state := "dispatch" endif)**
ANNEX_clientT ::= (run_Annex_clientT?; t:=0; v := 1.0; result := v; <t_dot = 1 & t < 0.001> |> [] (busy_clientT? --> busy_Annex_clientT!; run_Annex_clientT?); clientT_non_blocking_call!; <t_dot = 1 & t < 0.001> |> [] (busy_clientT? --> busy_Annex_clientT!; run_Annex_clientT?); clientT_blocking_call!; clientT_data_blocking!v; applyResource_clientT!; clientT_data_blocking_back?result; haveResource_clientT!; run_Annex_clientT?; <t_dot = 1 & t < 0.002> |> [] (busy_clientT? --> busy_Annex_clientT!; run_Annex_clientT?); complete_Annex_clientT!; clientT_annex_result!result)**
SCHEDULE_myprocess ::= run_queue := []; run_now := 0; (ready_clientT? --> if run_now == 0 then run_now := "clientT"; run_clientT! else run_queue := push(run_queue, "clientT") endif $ ready_serverT? --> run_now == "clientT" -> busy_clientT!; run_now == "serverT" -> busy_serverT!; run_now := "serverT"; run_serverT! $ free? --> ready_num := len(run_queue); ready_num == 0 -> run_now := 0; ready_num > 0 -> (run_now := bottom(run_queue); run_queue := pop(run_queue); run_now == "clientT" -> run_clientT!; run_now == "serverT" -> run_serverT!))**
SUB_op1 ::= k := 0; (call_op1?; t := 0; k := k+1; <t_dot = 1 & t < 0.001>; complete_op1!)**
SUB_op2 ::= k := 0; (call_op2?; t := 0; k := k+1; serverT_data_hser?x; y := x*2.0; <t_dot = 1 & t < 0.001>; serverT_data_op2!y; complete_op2!)**
serverT ::= @ACT_serverT || @COM_serverT || @SUB_op1 || @SUB_op2
ACT_serverT ::= ((serverT_aser? --> act_serverT!; serverT_access_aser! $ serverT_hser? --> act_serverT!; serverT_access_hser!); wait(0.01))**
COM_serverT ::= state := "dispatch"; (if state == "dispatch" then act_serverT?; t := 0; InitFlag := 0; state := "ready" elif state == "ready" then ready_serverT!; <t_dot = 1 & t < 0.01> |> [] (run_serverT? --> state := "running"); t == 0.01 -> state := "dispatch" else InitFlag == 0 -> (c := 0; (serverT_access_aser? --> call_op1!; <t_dot = 1, c_dot = 1 & c < 0.01 && t < 0.01> |> [] (complete_op1? --> skip; InitFlag := 1) $ serverT_access_hser? --> call_op2!; <t_dot = 1, c_dot = 1 & c < 0.01 && t < 0.01> |> [] (complete_op2? --> skip; InitFlag := 1))); InitFlag == 1 -> (<t_dot = 1, c_dot = 1 & c < 0.00 && t < 0.01> |> [] (busy_serverT? --> state := "ready"); t == 0.01 -> (free!; state := "dispatch"); c >= 0.00 -> (free!; state := "dispatch")) endif)**