heatSW ::= @sensor || @actuator || @controller || @Comms_heatSW
isollete ::= @babybox || @heatSW || @Comms_isollete
Comms_heatSW ::= @heatSW_Conn_0 || @heatSW_Conn_1 || @heatSW_Conn_2 || @heatSW_Conn_3
heatSW_Conn_0 ::= heatSW_boxTemp?x; sensor_boxTemp!x
heatSW_Conn_1 ::= sensor_measuredTemp?x; controller_measuredTemp!x
heatSW_Conn_2 ::= actuator_heatCommand?x; heatSW_heatCommand!x
heatSW_Conn_3 ::= controller_diff?x; actuator_diff!x
Comms_isollete ::= @isollete_Conn_0 || @isollete_Conn_1
isollete_Conn_0 ::= babybox_boxTemp?x; heatSW_boxTemp!x
isollete_Conn_1 ::= heatSW_heatCommand?x; babybox_heatCommand!x
actuator ::= @ACT_actuator || @DIS_actuator || @COM_actuator
ACT_actuator ::= (act_actuator!; wait(10))**
DIS_actuator ::= (act_actuator?; dis_actuator!; actuator_diff?diff; input_actuator_diff!diff; (complete_actuator? --> skip $ exit_actuator? --> skip))**
COM_actuator ::= @Init_actuator || @Ready_actuator || @Running_actuator || @Await_actuator
Init_actuator ::= (dis_actuator?; t := 0; init_actuator!t)**
Ready_actuator ::= (prior := 6; (init_actuator?t --> skip $ preempt_actuator?t --> skip $ unblock_actuator?t --> skip); tran_actuator!prior; <t_dot = 1 & t < 20> |> [] (run_actuator? --> resume_actuator!t); t == 20 -> exit_actuator!)**
Await_actuator ::= (block_actuator?t; applyResource_actuator!; <t_dot = 1 & t < 20> |> [] (haveResource_actuator? --> unblock_actuator!t); t == 20 -> exit_actuator!)**
Running_actuator ::= InitFlag := 0; (InitFlag == 0 -> c := 0; resume_actuator?t; c == 0 -> (input_actuator_diff?diff; if diff > 0.0 then heatCommand := -1.0 elif diff < 0.0 then heatCommand := 1.0 else heatCommand := 0.0 endif; actuator_heatCommand!heatCommand); <t_dot = 1, c_dot = 1 & t < 20> |> [] (busy_actuator? --> preempt_actuator!t; InitFlag := 1, needResource_actuator? --> block_actuator!t; InitFlag := 1); free!; t < 20 -> (complete_actuator!; InitFlag := 0); t == 20 -> (exit_actuator!; InitFlag := 0))**
babybox ::= (boxTemp := 98.0; babybox_boxTemp!boxTemp; babybox_heatCommand?heatCommand)**
controller ::= @ACT_controller || @DIS_controller || @COM_controller
ACT_controller ::= (act_controller!; wait(20))**
DIS_controller ::= (act_controller?; dis_controller!; controller_measuredTemp?measuredTemp; input_controller_measuredTemp!measuredTemp; (complete_controller? --> skip $ exit_controller? --> skip))**
COM_controller ::= @Init_controller || @Ready_controller || @Running_controller || @Await_controller
Init_controller ::= (dis_controller?; t := 0; init_controller!t)**
Ready_controller ::= (prior := 8; (init_controller?t --> skip $ preempt_controller?t --> skip $ unblock_controller?t --> skip); tran_controller!prior; <t_dot = 1 & t < 20> |> [] (run_controller? --> resume_controller!t); t == 20 -> exit_controller!)**
Await_controller ::= (block_controller?t; applyResource_controller!; <t_dot = 1 & t < 20> |> [] (haveResource_controller? --> unblock_controller!t); t == 20 -> exit_controller!)**
Running_controller ::= InitFlag := 0; (InitFlag == 0 -> c := 0; resume_controller?t; c == 0 -> (input_controller_measuredTemp?measuredTemp; gain := 10.0; if measuredTemp > 100.0 then diff := gain*(measuredTemp-100.0) elif measuredTemp < 97.0 then diff := gain*(measuredTemp-97.0) else diff := 0.0 endif; controller_diff!diff); <t_dot = 1, c_dot = 1 & t < 20> |> [] (busy_controller? --> preempt_controller!t; InitFlag := 1, needResource_controller? --> block_controller!t; InitFlag := 1); free!; t < 20 -> (complete_controller!; InitFlag := 0); t == 20 -> (exit_controller!; InitFlag := 0))**
SCHEDULE_heatSW ::= run_now := 0; run_prior := 0; ready_num := 0; (tran_sensor?prior --> run_prior < prior -> (run_now == "sensor" -> busy_sensor!; run_now == "actuator" -> busy_actuator!; run_now == "controller" -> busy_controller!; run_now := "sensor"; run_prior := prior; run_sensor!); run_prior > prior -> (insert_sensor!prior; ready_num := ready_num+1) $ tran_actuator?prior --> run_prior < prior -> (run_now == "sensor" -> busy_sensor!; run_now == "actuator" -> busy_actuator!; run_now == "controller" -> busy_controller!; run_now := "actuator"; run_prior := prior; run_actuator!); run_prior > prior -> (insert_actuator!prior; ready_num := ready_num+1) $ tran_controller?prior --> run_prior < prior -> (run_now == "sensor" -> busy_sensor!; run_now == "actuator" -> busy_actuator!; run_now == "controller" -> busy_controller!; run_now := "controller"; run_prior := prior; run_controller!); run_prior > prior -> (insert_controller!prior; ready_num := ready_num+1) $ free? --> ready_num > 0 -> (change_heatSW!; ch_run_heatSW?run_now; ch_prior_heatSW?run_prior; run_now == "sensor" -> run_sensor!; run_now == "actuator" -> run_actuator!; run_now == "controller" -> run_controller!; ready_num := ready_num-1); ready_num == 0 -> (run_now := 0; run_prior := 0))**
QUEUE_heatSW ::= q_0 := 0; p_0 := 0; q_1 := 0; p_1 := 0; q_2 := 0; p_2 := 0; (insert_sensor?prior --> p_1 < prior -> (q_2 := q_1; p_2 := p_1; p_0 < prior -> (q_1 := q_0; p_1 := p_0; q_0 := "sensor"; p_0 := prior); p_0 > prior -> (q_1 := "sensor"; p_1 := prior)); p_1 > prior -> (q_2 := "sensor"; p_2 := prior) $ insert_actuator?prior --> p_1 < prior -> (q_2 := q_1; p_2 := p_1; p_0 < prior -> (q_1 := q_0; p_1 := p_0; q_0 := "actuator"; p_0 := prior); p_0 > prior -> (q_1 := "actuator"; p_1 := prior)); p_1 > prior -> (q_2 := "actuator"; p_2 := prior) $ insert_controller?prior --> p_1 < prior -> (q_2 := q_1; p_2 := p_1; p_0 < prior -> (q_1 := q_0; p_1 := p_0; q_0 := "controller"; p_0 := prior); p_0 > prior -> (q_1 := "controller"; p_1 := prior)); p_1 > prior -> (q_2 := "controller"; p_2 := prior) $ change_heatSW? --> ch_run_heatSW!q_0; ch_prior_heatSW!p_0; q_0 := q_1; p_0 := p_1; q_1 := q_2; p_1 := p_2; q_2 := 0; p_2 := 0)**
sensor ::= @ACT_sensor || @DIS_sensor || @COM_sensor
ACT_sensor ::= (act_sensor!; wait(20))**
DIS_sensor ::= (act_sensor?; dis_sensor!; sensor_boxTemp?boxTemp; input_sensor_boxTemp!boxTemp; (complete_sensor? --> skip $ exit_sensor? --> skip))**
COM_sensor ::= @Init_sensor || @Ready_sensor || @Running_sensor || @Await_sensor
Init_sensor ::= (dis_sensor?; t := 0; init_sensor!t)**
Ready_sensor ::= (prior := 10; (init_sensor?t --> skip $ preempt_sensor?t --> skip $ unblock_sensor?t --> skip); tran_sensor!prior; <t_dot = 1 & t < 20> |> [] (run_sensor? --> resume_sensor!t); t == 20 -> exit_sensor!)**
Await_sensor ::= (block_sensor?t; applyResource_sensor!; <t_dot = 1 & t < 20> |> [] (haveResource_sensor? --> unblock_sensor!t); t == 20 -> exit_sensor!)**
Running_sensor ::= InitFlag := 0; (InitFlag == 0 -> c := 0; resume_sensor?t; c == 0 -> (input_sensor_boxTemp?boxTemp; e := 1.0; measuredTemp := heaterTemp+e; sensor_measuredTemp!measuredTemp); <t_dot = 1, c_dot = 1 & t < 20> |> [] (busy_sensor? --> preempt_sensor!t; InitFlag := 1, needResource_sensor? --> block_sensor!t; InitFlag := 1); free!; t < 20 -> (complete_sensor!; InitFlag := 0); t == 20 -> (exit_sensor!; InitFlag := 0))**