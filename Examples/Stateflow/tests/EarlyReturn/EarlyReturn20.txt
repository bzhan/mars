%type: module

module Chart():
procedure exec_Chart begin
  Chart_ret := 0;
  if Chart_st == "Chart_S" then
    Chart_S_done := 0;
    ChartEL != [] && top(ChartEL) == "E" -> (
      Chart_st == "Chart_S" -> (
        if Chart_S_st == "Chart_S_A1" then
          Chart_S_st == "Chart_S_A1" -> Chart_S_st := ""
        elif Chart_S_st == "Chart_S_A2" then
          Chart_S_st == "Chart_S_A2" -> Chart_S_st := ""
        else
          skip
        endif;
        s := "exS";
        log("exS" + "\n");
        Chart_st == "Chart_S" -> Chart_st := "";
        Chart_st == "" -> (
          Chart_st := "Chart_T";
          s := "enT";
          log("enT" + "\n")
        );
        Chart_S_done := 1
      )
    );
    Chart_st == "Chart_S" && Chart_S_done == 0 -> (
      s := "duS";
      log("duS" + "\n")
    );
    Chart_ret := Chart_S_done;
    Chart_ret == 0 -> (
      if Chart_S_st == "Chart_S_A1" then
        Chart_S_A1_done := 0;
        s := "ca1";
        log("ca1" + "\n");
        Chart_S_st == "Chart_S_A1" -> (
          s := "ca2";
          log("ca2" + "\n");
          Chart_S_st == "Chart_S_A1" -> Chart_S_st := "";
          ChartEL := push(ChartEL,"E");
          @exec_Chart;
          ChartEL := pop(ChartEL);
          Chart_S_st == "" && Chart_st == "Chart_S" -> (
            log("ta1" + "\n");
            s := "ta2";
            log("ta2" + "\n")
          );
          Chart_S_st == "" && Chart_st == "Chart_S" -> Chart_S_st := "Chart_S_A2";
          Chart_S_A1_done := 1
        );
        Chart_ret := Chart_S_A1_done
      elif Chart_S_st == "Chart_S_A2" then
        Chart_ret := 0
      else
        skip
      endif
    )
  elif Chart_st == "Chart_T" then
    Chart_ret := 0
  else
    skip
  endif
end

begin
  ChartEL := [];
  Chart_st := "Chart_S";
  s := "enS";
  log("enS" + "\n");
  Chart_S_st := "Chart_S_A1";
  (
    @exec_Chart;
    wait(0.1)
  )**
end
endmodule
system
Chart = Chart()
endsystem
