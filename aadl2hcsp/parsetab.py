
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "NAME NUMBER ATTACHED RIGHT_CURLY_BRA LEFT_CURLY_BRA COMP_OP LEFT_ANGLE_BRA RIGHT_ANGLE_BRA EQUALS PLUS MINUS TIMES DIVIDE REMAINDER LEFT_DIS RIGHT_DIS TRANSITIONS STATES VARIABLES INITIAL COMPLETE FINAL STATE INT FLOAT BOOLEAN DISPATCH ON IF WHILE END statement : statement ';' statement  statement : NAME ATTACHED expression statement : expression  expression : expression PLUS expression\n                          | expression MINUS expression\n                          | expression  TIMES expression\n                          | expression DIVIDE expression\n                          | expression REMAINDER expression\n                          | expression EQUALS expression\n                          | expression LEFT_ANGLE_BRA expression\n                          | expression RIGHT_ANGLE_BRA expression\n                          | expression COMP_OP expression expression : '-' expression\n                         | expression '!' expression : '(' expression ')'expression : NUMBERexpression : NAMEexpression : expression ',' expressiontype : INT\n                   | FLOAT\n                   | BOOLEAN statement : VARIABLES expression ':' type\n                          | VARIABLES expression\n                        state : state state\n                       | INITIAL\n                       | COMPLETE\n                       | FINALstatement : STATES NAME ':' state STATE  statement : TRANSITIONS NAME ':' NAME LEFT_DIS ON DISPATCH RIGHT_DIS NAME LEFT_CURLY_BRA statement RIGHT_CURLY_BRA  statement : IF '(' expression ')' statement  END IF   statement :  WHILE '(' expression ')' statement  END WHILE "
    
_lr_action_items = {'NAME':([0,4,5,6,8,10,12,13,14,15,16,17,18,19,20,21,22,24,29,31,47,60,61,73,75,],[2,26,27,28,26,26,2,26,26,26,26,26,26,26,26,26,26,26,26,26,59,2,2,74,2,]),'VARIABLES':([0,12,60,61,75,],[4,4,4,4,4,]),'STATES':([0,12,60,61,75,],[5,5,5,5,5,]),'TRANSITIONS':([0,12,60,61,75,],[6,6,6,6,6,]),'IF':([0,12,60,61,68,75,],[7,7,7,7,71,7,]),'WHILE':([0,12,60,61,69,75,],[9,9,9,9,72,9,]),'-':([0,4,8,10,12,13,14,15,16,17,18,19,20,21,22,24,29,31,60,61,75,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'(':([0,4,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,24,29,31,60,61,75,],[8,8,29,8,31,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NUMBER':([0,4,8,10,12,13,14,15,16,17,18,19,20,21,22,24,29,31,60,61,75,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'$end':([1,2,3,11,23,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,49,51,52,53,54,63,71,72,77,],[0,-17,-3,-16,-14,-23,-17,-13,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-18,-15,-22,-19,-20,-21,-28,-30,-31,-29,]),';':([1,2,3,11,23,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,49,51,52,53,54,63,65,66,71,72,76,77,],[12,-17,-3,-16,-14,-23,-17,-13,12,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-18,-15,-22,-19,-20,-21,-28,12,12,-30,-31,12,-29,]),'ATTACHED':([2,],[13,]),'PLUS':([2,3,11,23,25,26,30,32,34,35,36,37,38,39,40,41,42,43,44,48,49,50,],[-17,14,-16,-14,14,-17,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-15,14,]),'MINUS':([2,3,11,23,25,26,30,32,34,35,36,37,38,39,40,41,42,43,44,48,49,50,],[-17,15,-16,-14,15,-17,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-15,15,]),'TIMES':([2,3,11,23,25,26,30,32,34,35,36,37,38,39,40,41,42,43,44,48,49,50,],[-17,16,-16,-14,16,-17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-15,16,]),'DIVIDE':([2,3,11,23,25,26,30,32,34,35,36,37,38,39,40,41,42,43,44,48,49,50,],[-17,17,-16,-14,17,-17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-15,17,]),'REMAINDER':([2,3,11,23,25,26,30,32,34,35,36,37,38,39,40,41,42,43,44,48,49,50,],[-17,18,-16,-14,18,-17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-15,18,]),'EQUALS':([2,3,11,23,25,26,30,32,34,35,36,37,38,39,40,41,42,43,44,48,49,50,],[-17,19,-16,-14,19,-17,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-15,19,]),'LEFT_ANGLE_BRA':([2,3,11,23,25,26,30,32,34,35,36,37,38,39,40,41,42,43,44,48,49,50,],[-17,20,-16,-14,20,-17,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-15,20,]),'RIGHT_ANGLE_BRA':([2,3,11,23,25,26,30,32,34,35,36,37,38,39,40,41,42,43,44,48,49,50,],[-17,21,-16,-14,21,-17,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-15,21,]),'COMP_OP':([2,3,11,23,25,26,30,32,34,35,36,37,38,39,40,41,42,43,44,48,49,50,],[-17,22,-16,-14,22,-17,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-15,22,]),'!':([2,3,11,23,25,26,30,32,34,35,36,37,38,39,40,41,42,43,44,48,49,50,],[-17,23,-16,-14,23,-17,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-15,23,]),',':([2,3,11,23,25,26,30,32,34,35,36,37,38,39,40,41,42,43,44,48,49,50,],[-17,24,-16,-14,24,-17,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-15,24,]),'END':([2,3,11,23,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,49,51,52,53,54,63,65,66,71,72,77,],[-17,-3,-16,-14,-23,-17,-13,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-18,-15,-22,-19,-20,-21,-28,68,69,-30,-31,-29,]),'RIGHT_CURLY_BRA':([2,3,11,23,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,49,51,52,53,54,63,71,72,76,77,],[-17,-3,-16,-14,-23,-17,-13,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-18,-15,-22,-19,-20,-21,-28,-30,-31,77,-29,]),':':([11,23,25,26,27,28,32,35,36,37,38,39,40,41,42,43,44,49,],[-16,-14,45,-17,46,47,-13,-4,-5,-6,-7,-8,-9,-10,-11,-12,-18,-15,]),')':([11,23,26,30,32,35,36,37,38,39,40,41,42,43,44,48,49,50,],[-16,-14,-17,49,-13,-4,-5,-6,-7,-8,-9,-10,-11,-12,-18,60,-15,61,]),'INT':([45,],[52,]),'FLOAT':([45,],[53,]),'BOOLEAN':([45,],[54,]),'INITIAL':([46,55,56,57,58,62,],[56,56,-25,-26,-27,56,]),'COMPLETE':([46,55,56,57,58,62,],[57,57,-25,-26,-27,57,]),'FINAL':([46,55,56,57,58,62,],[58,58,-25,-26,-27,58,]),'STATE':([55,56,57,58,62,],[63,-25,-26,-27,-24,]),'LEFT_DIS':([59,],[64,]),'ON':([64,],[67,]),'DISPATCH':([67,],[70,]),'RIGHT_DIS':([70,],[73,]),'LEFT_CURLY_BRA':([74,],[75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,12,60,61,75,],[1,33,65,66,76,]),'expression':([0,4,8,10,12,13,14,15,16,17,18,19,20,21,22,24,29,31,60,61,75,],[3,25,30,32,3,34,35,36,37,38,39,40,41,42,43,44,48,50,3,3,3,]),'type':([45,],[51,]),'state':([46,55,62,],[55,62,62,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> statement ; statement','statement',3,'p_statement_list','parserAnnex.py',113),
  ('statement -> NAME ATTACHED expression','statement',3,'p_statement_assign','parserAnnex.py',117),
  ('statement -> expression','statement',1,'p_statement_expr','parserAnnex.py',121),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parserAnnex.py',125),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parserAnnex.py',126),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parserAnnex.py',127),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parserAnnex.py',128),
  ('expression -> expression REMAINDER expression','expression',3,'p_expression_binop','parserAnnex.py',129),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binop','parserAnnex.py',130),
  ('expression -> expression LEFT_ANGLE_BRA expression','expression',3,'p_expression_binop','parserAnnex.py',131),
  ('expression -> expression RIGHT_ANGLE_BRA expression','expression',3,'p_expression_binop','parserAnnex.py',132),
  ('expression -> expression COMP_OP expression','expression',3,'p_expression_binop','parserAnnex.py',133),
  ('expression -> - expression','expression',2,'p_expression_uminus','parserAnnex.py',137),
  ('expression -> expression !','expression',2,'p_expression_uminus','parserAnnex.py',138),
  ('expression -> ( expression )','expression',3,'p_expression_group','parserAnnex.py',142),
  ('expression -> NUMBER','expression',1,'p_expression_number','parserAnnex.py',146),
  ('expression -> NAME','expression',1,'p_expression_name','parserAnnex.py',149),
  ('expression -> expression , expression','expression',3,'p_expression_namelist','parserAnnex.py',153),
  ('type -> INT','type',1,'p_type_data','parserAnnex.py',157),
  ('type -> FLOAT','type',1,'p_type_data','parserAnnex.py',158),
  ('type -> BOOLEAN','type',1,'p_type_data','parserAnnex.py',159),
  ('statement -> VARIABLES expression : type','statement',4,'p_define_variable','parserAnnex.py',161),
  ('statement -> VARIABLES expression','statement',2,'p_define_variable','parserAnnex.py',162),
  ('state -> state state','state',2,'p_state_list','parserAnnex.py',168),
  ('state -> INITIAL','state',1,'p_state_list','parserAnnex.py',169),
  ('state -> COMPLETE','state',1,'p_state_list','parserAnnex.py',170),
  ('state -> FINAL','state',1,'p_state_list','parserAnnex.py',171),
  ('statement -> STATES NAME : state STATE','statement',5,'p_define_state','parserAnnex.py',178),
  ('statement -> TRANSITIONS NAME : NAME LEFT_DIS ON DISPATCH RIGHT_DIS NAME LEFT_CURLY_BRA statement RIGHT_CURLY_BRA','statement',12,'p_define_transtion','parserAnnex.py',183),
  ('statement -> IF ( expression ) statement END IF','statement',7,'p_if_statement','parserAnnex.py',188),
  ('statement -> WHILE ( expression ) statement END WHILE','statement',7,'p_while_statement','parserAnnex.py',191),
]
