%type: module

module PHY_vehicle_imp():
output v, s, a;
begin
  v := 0;
  s := 0;
  PHY_vehicle_imp_veh_a := 0;
  PHY_vehicle_imp_veh_s := 0;
  PHY_vehicle_imp_veh_v_l := 0;
  PHY_vehicle_imp_veh_v_w := 0;
  (
    inputs["PHY_vehicle_imp"]["veh_s"]!s -->
      PHY_vehicle_imp_veh_s := 1 $
    inputs["PHY_vehicle_imp"]["veh_v_l"]!v -->
      PHY_vehicle_imp_veh_v_l := 1 $
    inputs["PHY_vehicle_imp"]["veh_v_w"]!v -->
      PHY_vehicle_imp_veh_v_w := 1
  ){PHY_vehicle_imp_veh_s == 0 || PHY_vehicle_imp_veh_v_l == 0 || PHY_vehicle_imp_veh_v_w == 0}**;
  outputs["PHY_vehicle_imp"]["veh_a"]?a;
  (
    <v_dot = a, s_dot = v & true> |> [] (
      outputs["PHY_vehicle_imp"]["veh_a"]?a -->
        skip,
      inputs["PHY_vehicle_imp"]["veh_s"]!s -->
        skip,
      inputs["PHY_vehicle_imp"]["veh_v_l"]!v -->
        skip,
      inputs["PHY_vehicle_imp"]["veh_v_w"]!v -->
        skip
    )
  )**
end
endmodule

module EXE_img_acq_imp():
output image, new_image;
begin
  processing_state := 0;
  state := "wait";
  prior := 1;
  (
    if state == "wait" then
      dis["img_acq_imp"]?;
      inputs["img_acq_imp"]["img"]?image;
      t := 0;
      entered := 0;
      state := "ready"
    elif state == "ready" then
      reqProcessor[0]["img_acq_imp"]!prior;
      <t_dot = 1 & t < 0.045> |> [] (
        run[0]["img_acq_imp"]? -->
          state := "running"
      );
      t == 0.045 && state == "ready" -> (
        exit[0]["img_acq_imp"]! -->
          state := "wait" $
        run[0]["img_acq_imp"]? -->
          state := "running"
      )
    else
      entered == 0 -> (
        c := 0;
        new_image := processing_state;
        processing_state := image;
        entered := 1
      );
      entered == 1 -> (
        <t_dot = 1, c_dot = 1 & c < 0.01 && t < 0.045> |> [] (
          preempt[0]["img_acq_imp"]? -->
            state := "ready"
        );
        state == "running" -> (
          if c == 0.01 then
            outputs["img_acq_imp"]["proc_img"]!new_image;
            (
              preempt[0]["img_acq_imp"]? -->
                state := "wait" $
              free[0]["img_acq_imp"]! -->
                state := "wait"
            )
          else
            preempt[0]["img_acq_imp"]? -->
              state := "wait" $
            free[0]["img_acq_imp"]! -->
              state := "wait"
          endif
        )
      )
    endif
  )**
end
endmodule

module EXE_comp_obs_pos_imp():
output obs_pos_radar, proc_img, obs_pos;
begin
  x0 := 0;
  state := "wait";
  prior := 1;
  (
    if state == "wait" then
      dis["comp_obs_pos_imp"]?;
      inputs["comp_obs_pos_imp"]["obs_pos_radar"]?obs_pos_radar;
      inputs["comp_obs_pos_imp"]["proc_img"]?proc_img;
      t := 0;
      entered := 0;
      state := "ready"
    elif state == "ready" then
      reqProcessor[0]["comp_obs_pos_imp"]!prior;
      <t_dot = 1 & t < 0.097> |> [] (
        run[0]["comp_obs_pos_imp"]? -->
          state := "running"
      );
      t == 0.097 && state == "ready" -> (
        exit[0]["comp_obs_pos_imp"]! -->
          state := "wait" $
        run[0]["comp_obs_pos_imp"]? -->
          state := "running"
      )
    else
      entered == 0 -> (
        c := 0;
        if proc_img > 0 then
          x1 := proc_img
        else
          x1 := obs_pos_radar
        endif;
        if obs_pos_radar > 0 then
          x2 := obs_pos_radar
        else
          x2 := proc_img
        endif;
        x3 := min(x1,x2);
        if x3 > 0 then
          obs_pos := x3
        else
          obs_pos := x0
        endif;
        entered := 1
      );
      entered == 1 -> (
        <t_dot = 1, c_dot = 1 & c < 0.02 && t < 0.097> |> [] (
          preempt[0]["comp_obs_pos_imp"]? -->
            state := "ready"
        );
        state == "running" -> (
          if c == 0.02 then
            outputs["comp_obs_pos_imp"]["obs_pos"]!obs_pos;
            (
              preempt[0]["comp_obs_pos_imp"]? -->
                state := "wait" $
              free[0]["comp_obs_pos_imp"]! -->
                state := "wait"
            )
          else
            preempt[0]["comp_obs_pos_imp"]? -->
              state := "wait" $
            free[0]["comp_obs_pos_imp"]! -->
              state := "wait"
          endif
        )
      )
    endif
  )**
end
endmodule

module EXE_PI_ctr_imp():
output des_v, veh_v, des_a;
begin
  Integrator_DSTATE := 0;
  state := "wait";
  prior := 1;
  (
    if state == "wait" then
      dis["PI_ctr_imp"]?;
      inputs["PI_ctr_imp"]["des_v"]?des_v;
      inputs["PI_ctr_imp"]["veh_v"]?veh_v;
      t := 0;
      entered := 0;
      state := "ready"
    elif state == "ready" then
      reqProcessor[0]["PI_ctr_imp"]!prior;
      <t_dot = 1 & t < 0.007> |> [] (
        run[0]["PI_ctr_imp"]? -->
          state := "running"
      );
      t == 0.007 && state == "ready" -> (
        exit[0]["PI_ctr_imp"]! -->
          state := "wait" $
        run[0]["PI_ctr_imp"]? -->
          state := "running"
      )
    else
      entered == 0 -> (
        c := 0;
        x0 := des_v-veh_v;
        rtb_Sum := x0;
        rtb_IntegralGain := rtb_Sum*1;
        rtb_Sum := rtb_Sum*1;
        rtb_SumFdbk := rtb_Sum+Integrator_DSTATE;
        if rtb_SumFdbk > 3 then
          rtb_SumFdbk_0 := 3
        elif rtb_SumFdbk < -3 then
          rtb_SumFdbk_0 := -3
        else
          rtb_SumFdbk_0 := rtb_SumFdbk
        endif;
        rtb_IntegralGain := ((rtb_SumFdbk_0-rtb_SumFdbk)*1+rtb_IntegralGain)*0.007+Integrator_DSTATE;
        rtb_Sum := rtb_Sum+rtb_IntegralGain;
        if rtb_Sum > 3 then
          des_a := 3
        elif rtb_Sum < -3 then
          des_a := -3
        else
          des_a := rtb_Sum
        endif;
        Integrator_DSTATE := rtb_IntegralGain;
        entered := 1
      );
      entered == 1 -> (
        <t_dot = 1, c_dot = 1 & c < 0.001 && t < 0.007> |> [] (
          preempt[0]["PI_ctr_imp"]? -->
            state := "ready"
        );
        state == "running" -> (
          if c == 0.001 then
            outputs["PI_ctr_imp"]["des_a"]!des_a;
            (
              preempt[0]["PI_ctr_imp"]? -->
                state := "wait" $
              free[0]["PI_ctr_imp"]! -->
                state := "wait"
            )
          else
            preempt[0]["PI_ctr_imp"]? -->
              state := "wait" $
            free[0]["PI_ctr_imp"]! -->
              state := "wait"
          endif
        )
      )
    endif
  )**
end
endmodule

module EXE_emerg_imp():
output des_a, veh_v, obs_pos, veh_pos, cmd;
procedure en_emerg_imp_state begin
  skip
end
procedure du_emerg_imp_state begin
  skip
end
procedure ex_emerg_imp_state begin
  skip
end
procedure entry_emerg_imp_state begin
  emerg_imp_st := "emerg_imp_state";
  @en_emerg_imp_state
end
procedure during_emerg_imp_state begin
  emerg_imp_state_done := 0;
  true -> (
    next_v := veh_v+des_a*period;
    next_s := veh_pos+veh_v*period+0.5*des_a*period*period;
    emerg_imp_st == "emerg_imp_state" -> (
      @J14_1;
      emerg_imp_state_done := _ret
    )
  );
  emerg_imp_st == "emerg_imp_state" && emerg_imp_state_done == 0 -> @du_emerg_imp_state;
  _ret := emerg_imp_state_done
end
procedure exit_emerg_imp_state begin
  @ex_emerg_imp_state;
  emerg_imp_st := ""
end
procedure en_emerg_imp begin
  skip
end
procedure du_emerg_imp begin
  skip
end
procedure ex_emerg_imp begin
  skip
end
procedure entry_emerg_imp begin
  @en_emerg_imp
end
procedure during_emerg_imp begin
  @du_emerg_imp;
  _ret := 0
end
procedure exit_emerg_imp begin
  @ex_emerg_imp
end
procedure J14_1 begin
  J14_done := 0;
  distance := obs_pos-next_s;
  max_d := max_v*max_v/(-2*min_a);
  if obs_pos <= 0 || distance >= max_d then
    v_lim := max_v
  else
    if distance >= 0 then
      v_lim := sqrt(-2*min_a*distance)
    else
      v_lim := 0
    endif
  endif;
  next_v <= v_lim -> (
    @exit_emerg_imp_state;
    cmd := des_a;
    @entry_emerg_imp_state;
    _ret := 1;
    J14_done := _ret
  );
  J14_done == 0 -> (
    next_s := veh_pos+veh_v*period;
    @J20_1;
    J14_done := _ret
  );
  _ret := J14_done
end
procedure J20_1 begin
  J20_done := 0;
  distance := obs_pos-next_s;
  max_d := max_v*max_v/(-2*min_a);
  if obs_pos <= 0 || distance >= max_d then
    v_lim := max_v
  else
    if distance >= 0 then
      v_lim := sqrt(-2*min_a*distance)
    else
      v_lim := 0
    endif
  endif;
  veh_v <= v_lim -> (
    @exit_emerg_imp_state;
    cmd := 0;
    @entry_emerg_imp_state;
    _ret := 1;
    J20_done := _ret
  );
  J20_done == 0 -> (
    @exit_emerg_imp_state;
    cmd := min_a;
    @entry_emerg_imp_state;
    _ret := 1;
    J20_done := _ret
  );
  _ret := J20_done
end
procedure init_emerg_imp begin
  EL := [];
  v_lim := 0;
  max_v := 10;
  min_a := -3;
  period := 0.005;
  cmd := 0;
  next_v := 0;
  next_s := 0;
  @entry_emerg_imp;
  @entry_emerg_imp_state
end
procedure exec_emerg_imp begin
  @during_emerg_imp;
  _ret == 0 -> (
    if emerg_imp_st == "emerg_imp_state" then
      @during_emerg_imp_state
    else
      skip
    endif
  )
end
begin
  @init_emerg_imp;
  state := "wait";
  prior := 2;
  (
    if state == "wait" then
      dis["emerg_imp"]?;
      inputs["emerg_imp"]["des_a"]?des_a;
      inputs["emerg_imp"]["veh_v"]?veh_v;
      inputs["emerg_imp"]["obs_pos"]?obs_pos;
      inputs["emerg_imp"]["veh_pos"]?veh_pos;
      t := 0;
      entered := 0;
      state := "ready"
    elif state == "ready" then
      reqProcessor[0]["emerg_imp"]!prior;
      <t_dot = 1 & t < 0.005> |> [] (
        run[0]["emerg_imp"]? -->
          state := "running"
      );
      t == 0.005 && state == "ready" -> (
        exit[0]["emerg_imp"]! -->
          state := "wait" $
        run[0]["emerg_imp"]? -->
          state := "running"
      )
    elif state == "running" then
      entered == 0 -> (
        c := 0;
        @exec_emerg_imp;
        entered := 1
      );
      entered == 1 -> (
        <t_dot = 1, c_dot = 1 & c < 0.001 && t < 0.005> |> [] (
          preempt[0]["emerg_imp"]? -->
            state := "ready"
        );
        state == "running" -> (
          if c == 0.001 then
            reqBus["emerg_imp"]! -->
              outputs["emerg_imp"]["cmd"]!cmd;
              (
                preempt[0]["emerg_imp"]? -->
                  state := "wait" $
                free[0]["emerg_imp"]! -->
                  state := "wait"
              ) $
            block["emerg_imp"]? --> (
              preempt[0]["emerg_imp"]? -->
                state := "await" $
              free[0]["emerg_imp"]! -->
                state := "await")
          else
            preempt[0]["emerg_imp"]? -->
              state := "wait" $
            free[0]["emerg_imp"]! -->
              state := "wait"
          endif
        )
      )
    else
      <t_dot = 1 & t < 0.005> |> [] (
        unblock["emerg_imp"]? -->
          state := "ready"
      );
      t == 0.005 -> state := "wait"
    endif
  )**
end
endmodule

module EXE_velo_voter_imp():
output wheel_v, laser_v, veh_v;
begin
  x3 := 2;
  state := "wait";
  prior := 1;
  (
    if state == "wait" then
      dis["velo_voter_imp"]?;
      inputs["velo_voter_imp"]["wheel_v"]?wheel_v;
      inputs["velo_voter_imp"]["wheel_valid"]?wheel_valid;
      inputs["velo_voter_imp"]["laser_v"]?laser_v;
      inputs["velo_voter_imp"]["laser_valid"]?laser_valid;
      t := 0;
      entered := 0;
      state := "ready"
    elif state == "ready" then
      reqProcessor[0]["velo_voter_imp"]!prior;
      <t_dot = 1 & t < 0.008> |> [] (
        run[0]["velo_voter_imp"]? -->
          state := "running"
      );
      t == 0.008 && state == "ready" -> (
        exit[0]["velo_voter_imp"]! -->
          state := "wait" $
        run[0]["velo_voter_imp"]? -->
          state := "running"
      )
    else
      entered == 0 -> (
        c := 0;
        if wheel_valid > 0 then
          x0 := wheel_v
        else
          x0 := laser_v
        endif;
        if laser_valid > 0 then
          x1 := laser_v
        else
          x1 := wheel_v
        endif;
        x2 := x0+x1;
        veh_v := x2/x3;
        entered := 1
      );
      entered == 1 -> (
        <t_dot = 1, c_dot = 1 & c < 0.001 && t < 0.008> |> [] (
          preempt[0]["velo_voter_imp"]? -->
            state := "ready"
        );
        state == "running" -> (
          if c == 0.001 then
            outputs["velo_voter_imp"]["veh_v"]!veh_v;
            (
              preempt[0]["velo_voter_imp"]? -->
                state := "wait" $
              free[0]["velo_voter_imp"]! -->
                state := "wait"
            )
          else
            preempt[0]["velo_voter_imp"]? -->
              state := "wait" $
            free[0]["velo_voter_imp"]! -->
              state := "wait"
          endif
        )
      )
    endif
  )**
end
endmodule

module EXE_pan_ctr_th_imp():
output des_v;
procedure en_pan_ctr_th_imp_update begin
  skip
end
procedure du_pan_ctr_th_imp_update begin
  skip
end
procedure ex_pan_ctr_th_imp_update begin
  skip
end
procedure entry_pan_ctr_th_imp_update begin
  pan_ctr_th_imp_st := "pan_ctr_th_imp_update";
  @en_pan_ctr_th_imp_update
end
procedure during_pan_ctr_th_imp_update begin
  pan_ctr_th_imp_update_done := 0;
  EL != [] && top(EL) == "inc" -> (
    skip;
    pan_ctr_th_imp_st == "pan_ctr_th_imp_update" -> (
      @exit_pan_ctr_th_imp_update;
      des_v := des_v+1;
      @entry_pan_ctr_th_imp_update;
      _ret := 1;
      pan_ctr_th_imp_update_done := _ret
    )
  );
  pan_ctr_th_imp_st == "pan_ctr_th_imp_update" && pan_ctr_th_imp_update_done == 0 && EL != [] && top(EL) == "dec" -> (
    skip;
    pan_ctr_th_imp_st == "pan_ctr_th_imp_update" -> (
      @exit_pan_ctr_th_imp_update;
      des_v := des_v-1;
      @entry_pan_ctr_th_imp_update;
      _ret := 1;
      pan_ctr_th_imp_update_done := _ret
    )
  );
  pan_ctr_th_imp_st == "pan_ctr_th_imp_update" && pan_ctr_th_imp_update_done == 0 -> @du_pan_ctr_th_imp_update;
  _ret := pan_ctr_th_imp_update_done
end
procedure exit_pan_ctr_th_imp_update begin
  @ex_pan_ctr_th_imp_update;
  pan_ctr_th_imp_st := ""
end
procedure en_pan_ctr_th_imp begin
  skip
end
procedure du_pan_ctr_th_imp begin
  skip
end
procedure ex_pan_ctr_th_imp begin
  skip
end
procedure entry_pan_ctr_th_imp begin
  @en_pan_ctr_th_imp
end
procedure during_pan_ctr_th_imp begin
  @du_pan_ctr_th_imp;
  _ret := 0
end
procedure exit_pan_ctr_th_imp begin
  @ex_pan_ctr_th_imp
end
procedure init_pan_ctr_th_imp begin
  EL := [];
  des_v := 0;
  @entry_pan_ctr_th_imp;
  des_v := 0;
  @entry_pan_ctr_th_imp_update
end
procedure exec_pan_ctr_th_imp begin
  @during_pan_ctr_th_imp;
  _ret == 0 -> (
    if pan_ctr_th_imp_st == "pan_ctr_th_imp_update" then
      @during_pan_ctr_th_imp_update
    else
      skip
    endif
  )
end
begin
  @init_pan_ctr_th_imp;
  state := "wait";
  prior := 0;
  (
    if state == "wait" then
      dis["pan_ctr_th_imp"]["event"]?event;
      t := 0;
      entered := 0;
      state := "ready"
    elif state == "ready" then
      reqProcessor[0]["pan_ctr_th_imp"]!prior;
      <t_dot = 1 & t < 0.1> |> [] (
        run[0]["pan_ctr_th_imp"]? -->
          state := "running"
      );
      t == 0.1 && state == "ready" -> (
        exit[0]["pan_ctr_th_imp"]! -->
          state := "wait" $
        run[0]["pan_ctr_th_imp"]? -->
          state := "running"
      )
    else
      entered == 0 -> (
        c := 0;
        EL := push(EL,event);
        @exec_pan_ctr_th_imp;
        EL := pop(EL);
        entered := 1
      );
      entered == 1 -> (
        <t_dot = 1, c_dot = 1 & c < 0.01 && t < 0.1> |> [] (
          preempt[0]["pan_ctr_th_imp"]? -->
            state := "ready"
        );
        state == "running" -> (
          if c == 0.01 then
            outputs["pan_ctr_th_imp"]["des_v"]!des_v;
            (
              preempt[0]["pan_ctr_th_imp"]? -->
                state := "wait" $
              free[0]["pan_ctr_th_imp"]! -->
                state := "wait"
            )
          else
            preempt[0]["pan_ctr_th_imp"]? -->
              state := "wait" $
            free[0]["pan_ctr_th_imp"]! -->
              state := "wait"
          endif
        )
      )
    endif
  )**
end
endmodule

module DEVICE_camera():
output img;
begin
  (
    outputs["camera"]["img"]!-1;
    wait(0.2)
  )**
end
endmodule

module DEVICE_radar():
output obs_pos_radar;
begin
  t := 0;
  data := 0.0;
  (
    if t < 10 then
      data := 0.0
    elif t < 20 then
      slope := (55-35)/(20-10);
      data := 35+slope*(t-10)
    else
      data := 0.0
    endif;
    outputs["radar"]["obs_pos_radar"]!data;
    wait(0.01);
    t := t+0.01
  )**
end
endmodule

module DEVICE_actuator():
output cmd;
begin
  (
    inputs["actuator"]["cmd"]?cmd;
    outputs["PHY_vehicle_imp"]["veh_a"]!cmd;
    wait(0.002)
  )**
end
endmodule

module DEVICE_gps():
output data;
begin
  (
    inputs["PHY_vehicle_imp"]["veh_s"]?data;
    outputs["gps"]["veh_pos"]!data;
    wait(0.006)
  )**
end
endmodule

module DEVICE_laser():
begin
  (
    inputs["PHY_vehicle_imp"]["veh_v_l"]?data;
    t := 0;
    <t_dot = 1 & t < 0.01> |> [] (
      outputs["laser"]["laser_valid"]!1.0 -->
        error := 0;
        x := data+error;
        outputs["laser"]["laser_v"]!data+error
    );
    <t_dot = 1 & t < 0.01>
  )**
end
endmodule

module DEVICE_wheel():
begin
  (
    inputs["PHY_vehicle_imp"]["veh_v_w"]?data;
    t := 0;
    <t_dot = 1 & t < 0.01> |> [] (
      outputs["wheel"]["wheel_valid"]!1.0 -->
        error := 0;
        x := data+error;
        outputs["wheel"]["wheel_v"]!data+error
    );
    <t_dot = 1 & t < 0.01>
  )**
end
endmodule

module DEVICE_user_panel():
begin
  outputs["user_panel"]["event"]!"inc";
  wait(0.5);
  outputs["user_panel"]["event"]!"inc";
  wait(0.5);
  outputs["user_panel"]["event"]!"inc";
  wait(29);
  outputs["user_panel"]["event"]!"dec";
  outputs["user_panel"]["event"]!"dec"
end
endmodule

