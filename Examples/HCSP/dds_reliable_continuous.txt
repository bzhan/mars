system ::= @writer; || @env; || @reader; || @heartbeat; || @ack;

writer ::=
	st1 := "announcing";
	st2 := "waiting";
	unsent := [];
	sent := 0;
	ack := 0;
	re_unsent := [];
	hb_count := 3;
	{
		if (st1 == "announcing" ){
			if (unsent != []){
				st1 := "pushing";
			}else if (ack == sent){
				hb_count := 3;
			}else{
				hb_count := hb_count - 1;
				if (hb_count == 0){
					heartbeat!;
					hb_count := 3;
				}else{
					skip;
				}
			}
		}else{
			if (unsent == []){
				st1 := "announcing";
				hb_count := 3;
			}else{
				n := bottom(unsent);
				unsent := get(unsent);
				send!n;
				sent := sent + 1;
			}
		}

		if (st2 == "waiting") {
			if (re_unsent != []) {
				st2 := "must_repair";
				resp_delay := 5;
			}else{
				skip;
			}
		}else if (st2 == "must_repair"){
			resp_delay := resp_delay - 1;
			if (resp_delay == 0) {
				st2 := "repairing";
			}else{
				skip;
			}
		}else{
			if (re_unsent == []) {
				st2 := "waiting";
			}else{
				n := bottom(re_unsent);
				re_unsent := get(re_unsent);
				send!n;
			}
		}

		t := 0;
		{
			{t_dot = 1 & t < 1} |> [] (
				add?x --> unsent := push(unsent, x);,
				ack?x --> ack := ack + 1;,
				acknack?x --> re_unsent := push(re_unsent, x);
			)
		}*(t < 1)
	}*

env ::=
	wait(0.5);
	add!3;
	wait(0.7);
	add!4;
	wait(0.2);
	add!7;
	wait(2);
	add!5;
	wait(0.2);
	add!6;
	wait(0.4);
	add!1;
	wait(0.7);
	add!0;
	wait(0.1);
	add!2;

reader ::=
	data := [];
	{
		send?n;
		data := push(data, n);
	}*

heartbeat ::=
	{
		heartbeat?;
	}*

ack ::=
	wait(2.5);
	ack!3;
	wait(3.7);
	ack!7;
	wait(0.3);
	acknack!4;
	wait(0.3);
	ack!5;
	wait(2.5);
	ack!6;
	wait(0.4);
	ack!1;
	wait(2.5);
	ack!0;
	wait(0.4);
	ack!2;
	wait(1.8);
	ack!4;
