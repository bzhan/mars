
// Capital letters indicate that the rule produces a node in the parse tree!
// When changing this file, regenerate the grammar: 
// lezer-generator ./src/grammar/hcsp.grammar > ./src/grammar/hcsp_parser.js

@precedence { conj @right, disj @right, equiv @right, imp @right }

lname {
  var_expr { CNAME }
  | array_idx_expr { CNAME "[" expr "]" }
  | array_idx_expr2 { CNAME "[" expr "]" "[" expr "]" }
  | array_idx_expr3 { CNAME "[" expr "]" "[" expr "]""[" expr "]" }
  | field_expr { lname "." CNAME }
  | field_array_idx { lname "." CNAME "[" expr "]" }
} 

atom_expr {
  lname
  | NumExpr { SIGNED_NUMBER } 
  | StringExpr { escaped_string }
  | EmptyList { "[" "]" }
  | LiteralList { "[" expr ("," expr)* "]" }
  | EmptyDict { "{" "}" }
  | LiteralDict { "{" CNAME ":" expr ("," CNAME ":" expr)* "}" }
  | MinExpr { "min" "(" expr "," expr ")" }
  | MaxExpr { "max" "(" expr "," expr ")" }
  | GcdExpr { "gcd" "(" expr ("," expr)+ ")" }
  | FunExpr { CNAME "(" (expr)? ("," expr)* ")" }
  | paren_expr { "(" expr ")" }
}

power_expr {
  PowerExpr { power_expr "^" atom_expr }   // priority 85
  | atom_expr
}

uminus {
  UminusExpr { "-" uminus }
  | power_expr              // Unary minus: priority 80
}

times_expr {
  TimesExpr { times_expr "*" uminus }     // priority 70
  | DivideExpr { times_expr "/" uminus }
  | ModExpr { times_expr "%" uminus }
  | uminus
}

plus_expr {
  PlusExpr { plus_expr "+" times_expr }     // priority 65
  | MinusExpr { plus_expr "-" times_expr }
  | times_expr
} 

if_expr {
  IfExpr { "(" cond "?" if_expr ":" if_expr ")" }     // priority 40
  | plus_expr
}

expr { if_expr }

atom_cond {
  EqCond { expr "==" expr }                 // priority 50
  | IneqCond { expr "!=" expr }
  | LessEqCond { expr "<=" expr }
  | LessCond { expr "<" expr }
  | GreaterEqCond { expr ">=" expr }
  | GreaterCond { expr ">" expr }
  | NotCond { "!" cond }
  | TrueCond { "true" }
  | FalseCond { "false" }
  | "(" cond ")"
} 

conj {
  ConjCond { atom_cond !conj "&&" conj }
  | atom_cond       // Conjunction: priority 35
}

disj {
  DisjCond { conj !disj "|" disj }
  | conj                 // Disjunction: priority 30
}

equiv {
  EquivCond { disj !equiv "<->" equiv }
  | disj                  // Equivalent: priority 25
}

imp {
  ImpCond { equiv !imp "->" imp }
  | equiv                  // Implies: priority 20
}

exists_expr {
  ExCond { "\\exists" CNAME "." imp }            // Exists: priority 10
  | imp
}

forall_expr {
  ForallCond { "\\forall" CNAME "." imp }
}

cond { 
  exists_expr 
  | forall_expr
}

comm_cmd {
  InputCmd { 
    CNAME "?" lname
    | CNAME "[" expr "]" "?" lname
    | CNAME "[" expr "]" "[" expr "]" "?" lname
  }
  | InputNoneCmd {
    CNAME "?"
    | CNAME "[" expr "]" "?"
    | CNAME "[" expr "]" "[" expr "]" "?"
  }
  | OutputCmd {
    CNAME "!" expr 
    | CNAME "[" expr "]" "!" expr 
    | CNAME "[" expr "]" "[" expr "]" "!" expr 
  }
  | OutputNoneCmd {
    CNAME "!"
    | CNAME "[" expr "]" "!"
    | CNAME "[" expr "]" "[" expr "]" "!"
  }
}

ode_seq {
  CNAME "=" expr ("," CNAME "=" expr)*
}

interrupt {
  comm_cmd "-->" cmd ("," comm_cmd "-->" cmd)*
}

atom_cmd {
  VarCmd { "@" CNAME ";" }
  | SkipCmd { "skip" ";" }
  | WaitCmd { "wait" "(" expr ")" ";" }
  | AssignCmd { lname ":=" expr ";" }
  | MultiAssignCmd { "(" lname ("," lname)+ ")" ":=" expr ";" } // TODO: used + instead * here to avoid abiguity
  | RandomAssignCmd { lname ":=" "*" "(" cond ")" ";" }
  | AssertCmd { "assert" "(" cond ("," expr)* ")"  ";" }
  | TestCmd { "test" "(" cond ("," expr)* ")" ";" }
  | LogCmd { "log" "(" expr ("," expr)* ")" ";" }
  | comm_cmd ";"
  | RepeatCmd { "{" cmd "}" "*" maybe_loop_invariant }
  | RepeatCondCmd { "{" cmd "}*(" cond ")" maybe_loop_invariant}
  | Ode { OdeNoInv maybe_ode_invariant }
  | OdeCommConst { "{" "&" cond "}" "|>" "[]" "(" interrupt ")" maybe_ode_invariant}
  | OdeComm { "{" ode_seq "&" cond "}" "|>" "[]" "(" interrupt ")" maybe_ode_invariant} 
  | RecCmd { "rec" CNAME "{" cmd "}" }
  | IteCmd { "if" "(" cond ")" "{" cmd "}" ("else" "if" "(" cond ")" "{" cmd "}")* ("else" "{" cmd "}")? }
  | ParenCmd { "{" cmd "}" }
}

ichoice_cmd {
  atom_cmd 
  | IchoiceCmd { atom_cmd ("++" atom_cmd)+ }
}   // Priority: 80

SeqCmd {
  ichoice_cmd* // Priority: 70
}

select_cmd {
  SeqCmd 
  | SelectCmd { comm_cmd "-->" SeqCmd ("$" comm_cmd "-->" SeqCmd)* }  // Priority 50
}

cmd { select_cmd }

procedure { "procedure" CNAME "begin" cmd "end" }

maybe_invariant { ("invariant" Invariant ";")?}

Invariant { "[" cond "]"}

maybe_loop_invariant { ("invariant" Loop_invariant+ ";")? }
Loop_invariant { Invariant ("{{" proof_method ("," proof_method)* "}}")? }
proof_method { (label ":")? method }

method { "z3"       
      | "wolfram" }

categ_label { "init"
      | "maintain" }

atom_label { int
      | "execute"
      | "skip" }

branch_label {
    atom_label ("(" branch_label ")")?
  | branch_label "." atom_label ("(" branch_label ")")? 
}

label {
    categ_label
  | branch_label
  | categ_label branch_label
}

maybe_ode_invariant{ ("invariant" Ode_invariant+ ";")?}

//TODO: Do we need 'expr?' after 'ode_rule'?
Ode_invariant { InvariantWithRule
              | "ghost" CNAME
              | "ghost" "<" CNAME "=" expr ">"
}

InvariantWithRule { Invariant ("{" ode_rule "}")? }

OdeNoInv { "<" ode_seq "&" cond ">" }

ode_rule {
  "di" | "dbx" | "bc" | "dw" | "sln"
}

hoare_pre { "pre" ("[" cond "]")* ";" }
hoare_post { "post" ("[" cond "]")* ";" }
@top hoare_triple { hoare_pre cmd hoare_post }

parallel_cmd { cmd ("||" cmd)* }  // Priority 30, outermost level only

ModuleSig { 
  CNAME "(" (CNAME | "$" CNAME) ("," (CNAME | "$" CNAME))* ")"  
  | CNAME "(" ")"
}

ModuleOutput {
  "output" CNAME ("," CNAME)* ";"
}

Module {
  "module" ModuleSig ":" (ModuleOutput)* (procedure)* "begin" cmd "end" "endmodule"
}

module_arg {
  ModuleArgChannel { CNAME ("[" int "]")* } 
  | ModuleArgExpr { "$" expr }
}

ModuleArgs { 
  CNAME "(" module_arg ("," module_arg)* ")" 
  | CNAME "(" ")"
}

module_inst {
  ModuleInstNoName { ModuleArgs }
  | ModuleInst { CNAME "=" ModuleArgs }
} 

System {
  "system" module_inst ("||" module_inst)* "endsystem"
} 

Import {
  "import" CNAME
}

Decls {
  "%type: module" (Module | Import | System)*
}

@skip { ws | LineComment }

@tokens {
  digit { $[0-9] }
  int { digit+ }
  signed_int { $[+-] int }
  decimal { int "." int? | "." int }
  exp { $[eE] signed_int }
  float { int exp | decimal exp? }

  number { float | int }
  SIGNED_NUMBER { ("+"|"-")? number }

  // STRING_INNER { \.*?\ }
  // STRING_ESC_INNER { STRING_INNER \(?<!\\)(\\\\)*?\ }
  // TODO: String does not match Lark parser!

  escaped_string { '"' (![\\\n"] | "\\" _)* '"'? }

  lcase_letter { $[a-z] }
  ucase_letter { $[A-Z] }

  letter { ucase_letter | lcase_letter }

  CNAME { ("_"|letter) ("_"|letter|digit)* }

  LineComment { "#" ![\n]* }

  ws { $[ \t\f\r\n]+ }

  "+" "-" "^" "*" "/" "%"
  "&&" "||" "-->" "->" "$" ";" "++" "skip" "." "," ":" "?" "~" "&" "&&"
  "=" ":="
  "==" "!=" "<" "<=" ">" ">="

  "(" ")" "[" "]" "{" "}" "invariant" "|>" "[]" "}*("
  "if" "then" "else" "elif" "endif"
  "true" "false" "pre" "post"
  "gcd" "log" "max" "min" "rec" "skip" "test" "wait" "\\exists" "\\forall" "assert"
  "output"  "module" "begin" "end" "endmodule" "system" "endsystem" "import" "%type: module"
  
  @precedence { 
    SIGNED_NUMBER, "-", "pre", "post",
    "true", "false", "gcd", "if", "else", "log", "max", "min", "rec", "skip", 
    "test", "wait", "\\exists", "\\forall", "assert", "invariant", CNAME }
}

@detectDelim