%type: module

module water_tank():
output h, v, lb, ub;
begin
# Qmax := 0.007;r := 0.0254; h := 31; lb := 30; ub := 60;
Qmax := 2; r := 0.18; h := 4.5; lb := 4; ub := 6;
g := 9.8; pi := 3.14;
u:= 1; v := 1;
(<h_dot = v*Qmax-pi*r*r*sqrt(2*g*h)*u&true>|>[](wl!h --> skip, vc?v --> (v == 0 -> log("there!"))))**
end
endmodule

module DIS_periodic(tid, period):
begin
(t := 0; dis[tid]!; <t_dot = 1 & t < period>|>[](complete_comp[tid]? --> <t_dot = 1 & t < period>))**
end
endmodule

module set_valve():
output h, v, prior;
# procedure Compute begin
#     if h >= ub then v := 0 elif h <= lb then v := 1 else skip endif
# end

begin
# lb := 30; ub := 60; v := 1;
lb := 4.4; ub := 5.6; v := 1;
state := "wait"; prior := 2;
(
if state == "wait" then
    dis["set_valve"]?; cip?h;
    t := 0; c := 0; state := "ready"
elif state == "ready" then
    reqProcessor[0]["set_valve"]!prior;
    <t_dot = 1 & t < 0.1> |> [] (run[0]["set_valve"]? --> state := "running");
    state == "ready" ->
        (
        exit[0]["set_valve"]! --> state := "wait"
        $
        run[0]["set_valve"]? --> state := "running"
        )
else
    <t_dot = 1, c_dot = 1 & c < 0.025 && t < 0.1> |> []
      (
      preempt[0]["set_valve"]? --> state := "ready",
      complete_exec[0]["set_valve"]! --> pre_v := v; if h >= ub then v := 0 elif h <= lb then v := 1 else skip endif; (pre_v == 1 && v == 0) -> log("here"); complete_comp["set_valve"]!;
      <t_dot = 1, c_dot = 1 & c < 0.025 && t < 0.1>;
      (c >= 0.025 -> cop!v);
      (free[0]["set_valve"]! --> state := "wait" $ preempt[0]["set_valve"]? --> state := "wait")
      );
    state == "running" ->
        (
        preempt[0]["set_valve"]? --> state := "wait"
        $
        free[0]["set_valve"]! --> state := "wait"
        )
endif
)**
end
endmodule

module get_waterlevel():
output h;
# procedure Compute begin
#     skip
# end

begin
state := "wait"; prior := 1;
(
if state == "wait" then
    dis["get_waterlevel"]?; rip?h;
    t := 0; c := 0; state := "ready"
elif state == "ready" then
    reqProcessor[0]["get_waterlevel"]!prior;
    <t_dot = 1 & t < 0.1> |> [] (run[0]["get_waterlevel"]? --> state := "running");
    state == "ready" ->
        (
        exit[0]["get_waterlevel"]! --> state := "wait"
        $
        run[0]["get_waterlevel"]? --> state := "running"
        )
else
    <t_dot = 1, c_dot = 1 & c < 0.025 && t < 0.1> |> []
      (
      preempt[0]["get_waterlevel"]? --> state := "ready",
      complete_exec[0]["get_waterlevel"]! --> skip; complete_comp["get_waterlevel"]!;
      <t_dot = 1, c_dot = 1 & c < 0.025 && t < 0.1>;
      (c >= 0.025 -> rop!h);
      (free[0]["get_waterlevel"]! --> state := "wait" $ preempt[0]["get_waterlevel"]? --> state := "wait")
      );
    state == "running" ->
        (
        preempt[0]["get_waterlevel"]? --> state := "wait"
        $
        free[0]["get_waterlevel"]! --> state := "wait"
        )
endif
)**
end
endmodule

module sensor():
begin
(w?h; s!h)**
end
endmodule

module actuator():
begin
(c?v; ch_v!v)**
end
endmodule

module s2c():
begin
(s?h; rip!h)**
end
endmodule

module c2a():
begin
(cop?v; c!v)**
end
endmodule

module w2s():
begin
(wl?h; w!h)**
end
endmodule

module a2w():
begin
(ch_v?v; vc!v)**
end
endmodule

module conn():
begin
# (rop?h; cip!h)**
rop?h;
(rop?h --> skip $ cip!h --> skip)**
end
endmodule