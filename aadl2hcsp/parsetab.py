
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NAME NUMBER ATTACHED RIGHT_CURLY_BRA LEFT_CURLY_BRA COMP_OP LEFT_ANGLE_BRA RIGHT_ANGLE_BRA EQUALS PLUS MINUS TIMES DIVIDE REMAINDER LEFT_DIS RIGHT_DIS TRANSITIONS STATES VARIABLES INITIAL COMPLETE FINAL STATE INT FLOAT BOOLEAN DISPATCH ON IF ELIF ELSE WHILE END statement : statement statement  statement : NAME ATTACHED expression ";" statement : expression \';\' expression : expression PLUS expression\n                          | expression MINUS expression\n                          | expression  TIMES expression\n                          | expression DIVIDE expression\n                          | expression REMAINDER expression\n                          | expression EQUALS expression\n                          | expression LEFT_ANGLE_BRA expression\n                          | expression RIGHT_ANGLE_BRA expression\n                          | expression COMP_OP expression statement : expression \'!\' \';\' expression : \'(\' expression \')\'expression : NUMBER expression : NAME expression : expression \',\' expressiontype : INT\n                   | FLOAT\n                   | BOOLEAN\n                   statement : VARIABLES expression \':\' type \';\'\n                          | VARIABLES \':\' expression \';\'   state : state state\n                       | INITIAL\n                       | COMPLETE\n                       | FINALstatement : STATES NAME \':\' state STATE  \';\' statement : TRANSITIONS NAME \':\' NAME LEFT_DIS ON DISPATCH RIGHT_DIS NAME LEFT_CURLY_BRA statement RIGHT_CURLY_BRA \';\'  if_statement : IF \'(\' expression \')\' statement   else_statement : ELSE statement  elif_statement : ELIF  \'(\' expression \')\' statement\n                                | elif_statement elif_statement     statement : if_statement END IF \';\'\n                          | if_statement else_statement END IF \';\'\n                          | if_statement elif_statement else_statement END IF \';\'  statement :  WHILE \'(\' expression \')\' statement  END WHILE \';\' '
    
_lr_action_items = {'NAME':([0,1,4,5,6,10,12,13,14,16,17,18,19,20,21,22,23,24,25,27,34,36,37,40,54,59,60,64,69,75,79,80,81,85,87,88,89,90,92,93,97,98,100,101,103,],[2,2,28,29,30,28,2,28,-3,28,28,28,28,28,28,28,28,28,28,28,2,28,28,-13,74,2,28,-2,-22,-33,2,2,-21,-34,2,2,2,-27,-35,2,99,-36,2,2,-28,]),'VARIABLES':([0,1,12,14,34,40,59,64,69,75,79,80,81,85,87,88,89,90,92,93,98,100,101,103,],[4,4,4,-3,4,-13,4,-2,-22,-33,4,4,-21,-34,4,4,4,-27,-35,4,-36,4,4,-28,]),'STATES':([0,1,12,14,34,40,59,64,69,75,79,80,81,85,87,88,89,90,92,93,98,100,101,103,],[5,5,5,-3,5,-13,5,-2,-22,-33,5,5,-21,-34,5,5,5,-27,-35,5,-36,5,5,-28,]),'TRANSITIONS':([0,1,12,14,34,40,59,64,69,75,79,80,81,85,87,88,89,90,92,93,98,100,101,103,],[6,6,6,-3,6,-13,6,-2,-22,-33,6,6,-21,-34,6,6,6,-27,-35,6,-36,6,6,-28,]),'WHILE':([0,1,12,14,34,40,59,64,69,75,79,80,81,85,87,88,89,90,92,93,94,98,100,101,103,],[9,9,9,-3,9,-13,9,-2,-22,-33,9,9,-21,-34,9,9,9,-27,-35,9,96,-36,9,9,-28,]),'(':([0,1,4,8,9,10,12,13,14,16,17,18,19,20,21,22,23,24,25,27,34,35,36,37,40,59,60,64,69,75,79,80,81,85,87,88,89,90,92,93,98,100,101,103,],[10,10,10,36,37,10,10,10,-3,10,10,10,10,10,10,10,10,10,10,10,10,60,10,10,-13,10,10,-2,-22,-33,10,10,-21,-34,10,10,10,-27,-35,10,-36,10,10,-28,]),'NUMBER':([0,1,4,10,12,13,14,16,17,18,19,20,21,22,23,24,25,27,34,36,37,40,59,60,64,69,75,79,80,81,85,87,88,89,90,92,93,98,100,101,103,],[11,11,11,11,11,11,-3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-13,11,11,-2,-22,-33,11,11,-21,-34,11,11,11,-27,-35,11,-36,11,11,-28,]),'IF':([0,1,12,14,31,34,40,56,59,64,69,75,77,79,80,81,85,87,88,89,90,92,93,98,100,101,103,],[8,8,8,-3,55,8,-13,76,8,-2,-22,-33,86,8,8,-21,-34,8,8,8,-27,-35,8,-36,8,8,-28,]),'$end':([1,12,14,40,64,69,75,81,85,90,92,98,103,],[0,-1,-3,-13,-2,-22,-33,-21,-34,-27,-35,-36,-28,]),'ATTACHED':([2,],[13,]),';':([2,3,11,15,28,39,41,42,43,44,45,46,47,48,49,50,52,55,63,65,66,67,68,76,83,86,96,102,],[-16,14,-15,40,-16,64,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,69,75,-14,81,-18,-19,-20,85,90,92,98,103,]),'!':([2,3,11,28,41,42,43,44,45,46,47,48,49,50,63,],[-16,15,-15,-16,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-14,]),'PLUS':([2,3,11,26,28,38,39,41,42,43,44,45,46,47,48,49,50,52,61,62,63,78,],[-16,16,-15,16,-16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-14,16,]),'MINUS':([2,3,11,26,28,38,39,41,42,43,44,45,46,47,48,49,50,52,61,62,63,78,],[-16,17,-15,17,-16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-14,17,]),'TIMES':([2,3,11,26,28,38,39,41,42,43,44,45,46,47,48,49,50,52,61,62,63,78,],[-16,18,-15,18,-16,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-14,18,]),'DIVIDE':([2,3,11,26,28,38,39,41,42,43,44,45,46,47,48,49,50,52,61,62,63,78,],[-16,19,-15,19,-16,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-14,19,]),'REMAINDER':([2,3,11,26,28,38,39,41,42,43,44,45,46,47,48,49,50,52,61,62,63,78,],[-16,20,-15,20,-16,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-14,20,]),'EQUALS':([2,3,11,26,28,38,39,41,42,43,44,45,46,47,48,49,50,52,61,62,63,78,],[-16,21,-15,21,-16,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-14,21,]),'LEFT_ANGLE_BRA':([2,3,11,26,28,38,39,41,42,43,44,45,46,47,48,49,50,52,61,62,63,78,],[-16,22,-15,22,-16,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-14,22,]),'RIGHT_ANGLE_BRA':([2,3,11,26,28,38,39,41,42,43,44,45,46,47,48,49,50,52,61,62,63,78,],[-16,23,-15,23,-16,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-14,23,]),'COMP_OP':([2,3,11,26,28,38,39,41,42,43,44,45,46,47,48,49,50,52,61,62,63,78,],[-16,24,-15,24,-16,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-14,24,]),',':([2,3,11,26,28,38,39,41,42,43,44,45,46,47,48,49,50,52,61,62,63,78,],[-16,25,-15,25,-16,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-14,25,]),':':([4,11,26,28,29,30,41,42,43,44,45,46,47,48,49,50,63,],[27,-15,51,-16,53,54,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-14,]),'END':([7,12,14,32,40,58,59,64,69,75,81,85,88,89,90,92,98,103,],[31,-1,-3,56,-13,77,-30,-2,-22,-33,-21,-34,-29,94,-27,-35,-36,-28,]),'ELSE':([7,12,14,33,40,57,64,69,75,81,85,88,90,92,93,98,103,],[34,-1,-3,34,-13,-32,-2,-22,-33,-21,-34,-29,-27,-35,-31,-36,-28,]),'ELIF':([7,12,14,33,40,57,64,69,75,81,85,88,90,92,93,98,103,],[35,-1,-3,35,-13,35,-2,-22,-33,-21,-34,-29,-27,-35,-31,-36,-28,]),')':([11,28,38,41,42,43,44,45,46,47,48,49,50,61,62,63,78,],[-15,-16,63,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,79,80,-14,87,]),'RIGHT_CURLY_BRA':([12,14,40,64,69,75,81,85,90,92,98,101,103,],[-1,-3,-13,-2,-22,-33,-21,-34,-27,-35,-36,102,-28,]),'INT':([51,],[66,]),'FLOAT':([51,],[67,]),'BOOLEAN':([51,],[68,]),'INITIAL':([53,70,71,72,73,82,],[71,71,-24,-25,-26,71,]),'COMPLETE':([53,70,71,72,73,82,],[72,72,-24,-25,-26,72,]),'FINAL':([53,70,71,72,73,82,],[73,73,-24,-25,-26,73,]),'STATE':([70,71,72,73,82,],[83,-24,-25,-26,-23,]),'LEFT_DIS':([74,],[84,]),'ON':([84,],[91,]),'DISPATCH':([91,],[95,]),'RIGHT_DIS':([95,],[97,]),'LEFT_CURLY_BRA':([99,],[100,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,1,12,34,59,79,80,87,88,89,93,100,101,],[1,12,12,59,12,88,89,93,12,12,12,101,12,]),'expression':([0,1,4,10,12,13,16,17,18,19,20,21,22,23,24,25,27,34,36,37,59,60,79,80,87,88,89,93,100,101,],[3,3,26,38,3,39,41,42,43,44,45,46,47,48,49,50,52,3,61,62,3,78,3,3,3,3,3,3,3,3,]),'if_statement':([0,1,12,34,59,79,80,87,88,89,93,100,101,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'else_statement':([7,33,],[32,58,]),'elif_statement':([7,33,57,],[33,57,57,]),'type':([51,],[65,]),'state':([53,70,82,],[70,82,82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> statement statement','statement',2,'p_statement_list','parserAnnex.py',150),
  ('statement -> NAME ATTACHED expression ;','statement',4,'p_statement_assign','parserAnnex.py',162),
  ('statement -> expression ;','statement',2,'p_statement_expr','parserAnnex.py',166),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parserAnnex.py',170),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parserAnnex.py',171),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parserAnnex.py',172),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parserAnnex.py',173),
  ('expression -> expression REMAINDER expression','expression',3,'p_expression_binop','parserAnnex.py',174),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binop','parserAnnex.py',175),
  ('expression -> expression LEFT_ANGLE_BRA expression','expression',3,'p_expression_binop','parserAnnex.py',176),
  ('expression -> expression RIGHT_ANGLE_BRA expression','expression',3,'p_expression_binop','parserAnnex.py',177),
  ('expression -> expression COMP_OP expression','expression',3,'p_expression_binop','parserAnnex.py',178),
  ('statement -> expression ! ;','statement',3,'p_expression_uminus','parserAnnex.py',206),
  ('expression -> ( expression )','expression',3,'p_expression_group','parserAnnex.py',210),
  ('expression -> NUMBER','expression',1,'p_expression_number','parserAnnex.py',214),
  ('expression -> NAME','expression',1,'p_expression_name','parserAnnex.py',217),
  ('expression -> expression , expression','expression',3,'p_expression_namelist','parserAnnex.py',221),
  ('type -> INT','type',1,'p_type_data','parserAnnex.py',234),
  ('type -> FLOAT','type',1,'p_type_data','parserAnnex.py',235),
  ('type -> BOOLEAN','type',1,'p_type_data','parserAnnex.py',236),
  ('statement -> VARIABLES expression : type ;','statement',5,'p_define_variable','parserAnnex.py',241),
  ('statement -> VARIABLES : expression ;','statement',4,'p_define_variable','parserAnnex.py',242),
  ('state -> state state','state',2,'p_state_list','parserAnnex.py',254),
  ('state -> INITIAL','state',1,'p_state_list','parserAnnex.py',255),
  ('state -> COMPLETE','state',1,'p_state_list','parserAnnex.py',256),
  ('state -> FINAL','state',1,'p_state_list','parserAnnex.py',257),
  ('statement -> STATES NAME : state STATE ;','statement',6,'p_define_state','parserAnnex.py',264),
  ('statement -> TRANSITIONS NAME : NAME LEFT_DIS ON DISPATCH RIGHT_DIS NAME LEFT_CURLY_BRA statement RIGHT_CURLY_BRA ;','statement',13,'p_define_transtion','parserAnnex.py',268),
  ('if_statement -> IF ( expression ) statement','if_statement',5,'p_if_substatement','parserAnnex.py',273),
  ('else_statement -> ELSE statement','else_statement',2,'p_else_substatement','parserAnnex.py',277),
  ('elif_statement -> ELIF ( expression ) statement','elif_statement',5,'p_elif_substatement','parserAnnex.py',281),
  ('elif_statement -> elif_statement elif_statement','elif_statement',2,'p_elif_substatement','parserAnnex.py',282),
  ('statement -> if_statement END IF ;','statement',4,'p_if_statement','parserAnnex.py',289),
  ('statement -> if_statement else_statement END IF ;','statement',5,'p_if_statement','parserAnnex.py',290),
  ('statement -> if_statement elif_statement else_statement END IF ;','statement',6,'p_if_statement','parserAnnex.py',291),
  ('statement -> WHILE ( expression ) statement END WHILE ;','statement',8,'p_while_statement','parserAnnex.py',301),
]
