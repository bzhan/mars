%type: module

module Chart():
begin
  ChartEL := [];
  x := 1;
  Chart_st := "Chart_A";
  s := "enA";
  log("enA" + "\n");
  (
    Chart_ret := 0;
    if Chart_st == "Chart_A" then
      Chart_A_done := 0;
      Chart_st == "Chart_A" -> (
        s := "exA";
        log("exA" + "\n");
        Chart_st == "Chart_A" -> Chart_st := "";
        Chart_st == "" -> (
          Chart_st := "Chart_B";
          s := "enB";
          log("enB" + "\n")
        );
        Chart_A_done := 1
      );
      Chart_ret := Chart_A_done
    elif Chart_st == "Chart_C" then
      Chart_ret := 0
    elif Chart_st == "Chart_B" then
      Chart_B_done := 0;
      s := "conBJun";
      log("conBJun" + "\n");
      Chart_st == "Chart_B" -> (
        log("conJunC" + "\n");
        Chart_st == "Chart_B" -> (
          log("exB" + "\n");
          Chart_st == "Chart_B" -> Chart_st := ""
        );
        log("tranBJun" + "\n");
        s := "tranJunC";
        log("tranJunC" + "\n");
        Chart_st == "" -> (
          Chart_st := "Chart_C";
          s := "enC";
          log("enC" + "\n")
        );
        Chart_B_done := 1
      );
      Chart_ret := Chart_B_done
    else
      skip
    endif;
    wait(0.1)
  )**
end
endmodule
system
Chart = Chart()
endsystem
