heatSW ::= @sensor || @actuator || @controller || @Comms_heatSW
isolette ::= @babybox || @heatSW || @Comms_isolette
Comms_heatSW ::= @heatSW_Conn_0 || @heatSW_Conn_1 || @heatSW_Conn_2 || @heatSW_Conn_3
heatSW_Conn_0 ::= (heatSW_boxTemp?x; sensor_boxTemp!x)**
heatSW_Conn_1 ::= (sensor_measuredTemp?x; controller_measuredTemp!x)**
heatSW_Conn_2 ::= (actuator_heatCommand?x; heatSW_heatCommand!x)**
heatSW_Conn_3 ::= (controller_diff?x; actuator_diff!x)**
Comms_isolette ::= @isolette_Conn_0 || @isolette_Conn_1
isolette_Conn_0 ::= (babybox_boxTemp?x; heatSW_boxTemp!x; wait(0.2))**
isolette_Conn_1 ::= (heatSW_heatCommand?x; babybox_heatCommand!x)**
actuator ::= @ACT_actuator || @COM_actuator
ACT_actuator ::= (actuator_diff?diff; act_actuator!; actuator_data_diff!diff)**
COM_actuator ::= state := "dispatch"; prior := 6; (if state == "dispatch" then act_actuator?; t := 0; InitFlag := 0; state := "ready" elif state == "ready" then tran_actuator!prior; <t_dot = 1 & t < 0.2> |> [] (run_actuator? --> state := "running"); t == 0.2 -> state := "dispatch" else InitFlag == 0 -> (c := 0; actuator_data_diff?diff; if diff > 0.0 then heatCommand := -1.0 else heatCommand := 1.0 endif; InitFlag := 1); InitFlag == 1 -> (<t_dot = 1, c_dot = 1 & c < 0.003 && t < 0.2> |> [] (busy_actuator? --> state := "ready"); t == 0.2 -> (free!; state := "dispatch"); c == 0.003 -> (actuator_heatCommand!heatCommand; free!; state := "dispatch")) endif)**
babybox ::= q := 97; c := 100; x0 := 1; (<q_dot = -1, c_dot = (-q+c)*(-0.026) & x0 <= 0> |> [] (babybox_heatCommand?x0 --> skip, babybox_boxTemp!c --> skip); <q_dot = 1, c_dot = (-q+c)*(-0.026) & x0 > 0> |> [] (babybox_heatCommand?x0 --> skip, babybox_boxTemp!c --> skip))**
controller ::= @ACT_controller || @COM_controller
ACT_controller ::= (controller_measuredTemp?measuredTemp; act_controller!; controller_data_measuredTemp!measuredTemp)**
COM_controller ::= state := "dispatch"; prior := 8; (if state == "dispatch" then act_controller?; t := 0; InitFlag := 0; state := "ready" elif state == "ready" then tran_controller!prior; <t_dot = 1 & t < 0.2> |> [] (run_controller? --> state := "running"); t == 0.2 -> state := "dispatch" else InitFlag == 0 -> (c := 0; controller_data_measuredTemp?measuredTemp; gain := 10.0; diff := gain*(measuredTemp-98.5); InitFlag := 1); InitFlag == 1 -> (<t_dot = 1, c_dot = 1 & c < 0.001 && t < 0.2> |> [] (busy_controller? --> state := "ready"); t == 0.2 -> (free!; state := "dispatch"); c == 0.001 -> (controller_diff!diff; free!; state := "dispatch")) endif)**
SCHEDULE_heatSW ::= run_queue := []; run_now := 0; run_prior := 0; (tran_sensor?prior --> run_prior >= prior -> run_queue := push(run_queue, [prior,"sensor"]); run_prior < prior -> (run_now == "sensor" -> busy_sensor!; run_now == "actuator" -> busy_actuator!; run_now == "controller" -> busy_controller!; run_now := "sensor"; run_prior := prior; run_sensor!) $ tran_actuator?prior --> run_prior >= prior -> run_queue := push(run_queue, [prior,"actuator"]); run_prior < prior -> (run_now == "sensor" -> busy_sensor!; run_now == "actuator" -> busy_actuator!; run_now == "controller" -> busy_controller!; run_now := "actuator"; run_prior := prior; run_actuator!) $ tran_controller?prior --> run_prior >= prior -> run_queue := push(run_queue, [prior,"controller"]); run_prior < prior -> (run_now == "sensor" -> busy_sensor!; run_now == "actuator" -> busy_actuator!; run_now == "controller" -> busy_controller!; run_now := "controller"; run_prior := prior; run_controller!) $ free? --> ready_num := len(run_queue); if ready_num == 0 then run_now := 0; run_prior := 0 else (run_prior, run_now) := get_max(run_queue); run_queue := pop_max(run_queue); run_now == "sensor" -> run_sensor!; run_now == "actuator" -> run_actuator!; run_now == "controller" -> run_controller! endif)**
sensor ::= @ACT_sensor || @COM_sensor
ACT_sensor ::= (act_sensor!; wait(0.2))**
COM_sensor ::= state := "dispatch"; prior := 10; (if state == "dispatch" then act_sensor?; t := 0; InitFlag := 0; state := "ready" elif state == "ready" then tran_sensor!prior; <t_dot = 1 & t < 0.2> |> [] (run_sensor? --> state := "running"); t == 0.2 -> state := "dispatch" else InitFlag == 0 -> (c := 0; <t_dot = 1 & t < 0.2> |> [] (sensor_boxTemp?boxTemp --> e := 0.0; measuredTemp := boxTemp+e; InitFlag := 1, busy_sensor? --> state := "ready")); InitFlag == 1 -> (<t_dot = 1, c_dot = 1 & c < 0.001 && t < 0.2> |> [] (busy_sensor? --> state := "ready"); t == 0.2 -> (free!; state := "dispatch"); c == 0.001 -> (sensor_measuredTemp!measuredTemp; free!; state := "dispatch")) endif)**