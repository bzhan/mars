HeatSW ::= @sensor || @HeatCooler || @Regulator
Regulator ::= @regulator
box ::= @boxThread || @Comms_box
conditioner ::= @HeatSW || @sim_model || @Comms_conditioner
sim_model ::= @box
box_Conns ::= boxIn?x; boxThread_simIn!x || boxThread_simOut?x; boxOut!x
conditioner_Conns ::= HeatSW_currrentTemp?x; sim_model_boxIn!x || sim_model_boxOut?x; HeatSW_desiredTemp!x
HeatCooler ::= (@ACT_HeatCooler)** || (@DIS_HeatCooler)** || (@COM_HeatCooler)**
ACT_HeatCooler ::= act_HeatCooler!
DIS_HeatCooler ::= act_HeatCooler?; wait(20); dis_HeatCooler!; (complete_HeatCooler? --> skip $ exit_HeatCooler? --> skip)
COM_HeatCooler ::= dis_HeatCooler?; t := 0; init_HeatCooler!t || (@Ready_HeatCooler)** || c := 0; (@Running_HeatCooler)** || (@Await_HeatCooler)** || @Annex_HeatCooler
Ready_HeatCooler ::= (init_HeatCooler?t --> skip $ preempt_HeatCooler?t --> skip $ unblock_HeatCooler?t --> skip); tran_HeatCooler!prior; <t_dot = 1 & t < 20> |> [] (run_HeatCooler? --> resume_HeatCooler!t); t == 20 -> exit_HeatCooler!
Await_HeatCooler ::= block_HeatCooler?t; <t_dot = 1 & t < 20> |> [] (haveResource_HeatCooler? --> unblock_HeatCooler!t); t == 20 -> exit_HeatCooler!
Running_HeatCooler ::= resume_HeatCooler?t; (start_Annex_HeatCooler! --> skip $ restart_Annex_HeatCooler! --> skip); <t_dot = 1, c_dot = 1 & t < 20> |> [] (busy_HeatCooler? --> preempt_HeatCooler!t, needResource_HeatCooler? --> block_HeatCooler!t; applyResource_HeatCooler!; free!, complete_Annex_HeatCooler? --> free!; complete_HeatCooler!); t == 20 -> (free!; exit_HeatCooler!)
Annex_HeatCooler ::= start_Annex_HeatCooler?; command >= 0.0 -> (heating := heating; Temp := Temp+1.0); command < 0.0 -> (cooling := cooling; Temp := Temp-1.0); temperature := Temp; wait(5); need_Resource_HeatCooler!; restart_Annex_HeatCooler?; wait(5); complete_Annex_HeatCooler!
RUN_HeatSW ::= run_now == sensor -> run_sensor!; run_now == HeatCooler -> run_HeatCooler!; run_now == Regulator -> run_Regulator!
SCHEDULE_HeatSW ::= run_now := 0; ready_num := 0; (tran_sensor? --> insert_sensor!; ready_num := ready_num+1 $ tran_HeatCooler? --> insert_HeatCooler!; ready_num := ready_num+1 $ tran_Regulator? --> insert_Regulator!; ready_num := ready_num+1 $ free? --> ready_num > 0 -> (change_HeatSW!; ch_run_HeatSW?run_now; @RUN_HeatSW; ready_num := ready_num-1); ready_num == 0 -> run_now := 0)**
QUEUE_HeatSW ::= q_0 := 0; q_1 := 0; q_2 := 0; (insert_sensor? --> q_0 != 0 -> (q_1 != 0 -> q_2 := sensor; q_1 == 0 -> q_1 := sensor); q_0 == 0 -> q_0 := sensor $ insert_HeatCooler? --> q_0 != 0 -> (q_1 != 0 -> q_2 := HeatCooler; q_1 == 0 -> q_1 := HeatCooler); q_0 == 0 -> q_0 := HeatCooler $ insert_Regulator? --> q_0 != 0 -> (q_1 != 0 -> q_2 := Regulator; q_1 == 0 -> q_1 := Regulator); q_0 == 0 -> q_0 := Regulator $ change_HeatSW? --> ch_run_HeatSW!q_0; q_0 := q_1; q_1 := q_2; q_2 := 0)**
boxThread ::= (@ACT_boxThread)** || (@DIS_boxThread)** || (@COM_boxThread)**
ACT_boxThread ::= act_boxThread!
DIS_boxThread ::= act_boxThread?; wait(10); dis_boxThread!; boxThread_simIn?simIn; boxThread_simOut?simOut; input_boxThread_simIn!simIn; input_boxThread_simOut!simOut; (complete_boxThread? --> skip $ exit_boxThread? --> skip)
COM_boxThread ::= dis_boxThread?; t := 0; init_boxThread!t || (@Ready_boxThread)** || c := 0; (@Running_boxThread)** || (@Await_boxThread)** || @Annex_boxThread
Ready_boxThread ::= (init_boxThread?t --> skip $ preempt_boxThread?t --> skip $ unblock_boxThread?t --> skip); tran_boxThread!prior; <t_dot = 1 & t < 10> |> [] (run_boxThread? --> resume_boxThread!t); t == 10 -> exit_boxThread!
Await_boxThread ::= block_boxThread?t; <t_dot = 1 & t < 10> |> [] (haveResource_boxThread? --> unblock_boxThread!t); t == 10 -> exit_boxThread!
Running_boxThread ::= resume_boxThread?t; (start_Annex_boxThread! --> skip $ restart_Annex_boxThread! --> skip); <t_dot = 1, c_dot = 1 & t < 10> |> [] (busy_boxThread? --> preempt_boxThread!t, needResource_boxThread? --> block_boxThread!t; applyResource_boxThread!; free!, complete_Annex_boxThread? --> free!; complete_boxThread!); t == 10 -> (free!; exit_boxThread!)
Annex_boxThread ::= start_Annex_boxThread?; input_boxThread_simIn?simIn; input_boxThread_simOut?simOut; wait(5); need_Resource_boxThread!; restart_Annex_boxThread?; wait(5); complete_Annex_boxThread!
RUN_box ::= run_now == boxThread -> run_boxThread!
SCHEDULE_box ::= run_now := 0; ready_num := 0; (tran_boxThread? --> insert_boxThread!; ready_num := ready_num+1 $ free? --> ready_num > 0 -> (change_box!; ch_run_box?run_now; @RUN_box; ready_num := ready_num-1); ready_num == 0 -> run_now := 0)**
QUEUE_box ::= q_0 := 0; (insert_boxThread? --> q_0 := boxThread $ change_box? --> ch_run_box!q_0; q_0 := 0)**
regulator ::= (@ACT_regulator)** || (@DIS_regulator)** || (@COM_regulator)**
ACT_regulator ::= act_regulator!
DIS_regulator ::= act_regulator?; wait(20); dis_regulator!; (complete_regulator? --> skip $ exit_regulator? --> skip)
COM_regulator ::= dis_regulator?; t := 0; init_regulator!t || (@Ready_regulator)** || c := 0; (@Running_regulator)** || (@Await_regulator)** || @Annex_regulator
Ready_regulator ::= (init_regulator?t --> skip $ preempt_regulator?t --> skip $ unblock_regulator?t --> skip); tran_regulator!prior; <t_dot = 1 & t < 20> |> [] (run_regulator? --> resume_regulator!t); t == 20 -> exit_regulator!
Await_regulator ::= block_regulator?t; <t_dot = 1 & t < 20> |> [] (haveResource_regulator? --> unblock_regulator!t); t == 20 -> exit_regulator!
Running_regulator ::= resume_regulator?t; (start_Annex_regulator! --> skip $ restart_Annex_regulator! --> skip); <t_dot = 1, c_dot = 1 & t < 20> |> [] (busy_regulator? --> preempt_regulator!t, needResource_regulator? --> block_regulator!t; applyResource_regulator!; free!, complete_Annex_regulator? --> free!; complete_regulator!); t == 20 -> (free!; exit_regulator!)
Annex_regulator ::= start_Annex_regulator?; gain := 2.0; diff := desiredTemp-measuredTemp; heaterCommand := diff*gain; wait(5); need_Resource_regulator!; restart_Annex_regulator?; wait(5); complete_Annex_regulator!
sensor ::= (@ACT_sensor)** || (@DIS_sensor)** || (@COM_sensor)**
ACT_sensor ::= act_sensor!
DIS_sensor ::= act_sensor?; wait(20); dis_sensor!; sensor_heatTemp?heatTemp; sensor_measureTemp?measureTemp; input_sensor_heatTemp!heatTemp; input_sensor_measureTemp!measureTemp; (complete_sensor? --> skip $ exit_sensor? --> skip)
COM_sensor ::= dis_sensor?; t := 0; init_sensor!t || (@Ready_sensor)** || c := 0; (@Running_sensor)** || (@Await_sensor)** || @Annex_sensor
Ready_sensor ::= (init_sensor?t --> skip $ preempt_sensor?t --> skip $ unblock_sensor?t --> skip); tran_sensor!prior; <t_dot = 1 & t < 20> |> [] (run_sensor? --> resume_sensor!t); t == 20 -> exit_sensor!
Await_sensor ::= block_sensor?t; <t_dot = 1 & t < 20> |> [] (haveResource_sensor? --> unblock_sensor!t); t == 20 -> exit_sensor!
Running_sensor ::= resume_sensor?t; (start_Annex_sensor! --> skip $ restart_Annex_sensor! --> skip); <t_dot = 1, c_dot = 1 & t < 20> |> [] (busy_sensor? --> preempt_sensor!t, needResource_sensor? --> block_sensor!t; applyResource_sensor!; free!, complete_Annex_sensor? --> free!; complete_sensor!); t == 20 -> (free!; exit_sensor!)
Annex_sensor ::= start_Annex_sensor?; input_sensor_heatTemp?heatTemp; input_sensor_measureTemp?measureTemp; e := 1.0; measuredTemp := heaterTemp+e; wait(5); need_Resource_sensor!; restart_Annex_sensor?; wait(5); complete_Annex_sensor!