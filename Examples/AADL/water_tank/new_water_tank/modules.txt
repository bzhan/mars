%type: module

module water_tank():
output h, v, lb, ub;
begin
# Qmax := 0.007;r := 0.0254; h := 31; lb := 30; ub := 60;
Qmax := 2; r := 0.18; h := 4.5; lb := 4; ub := 6;
g := 9.8;
u:= 1; v := 1;
{
    {h_dot = v*Qmax-pi*r*r*sqrt(2*g*h)*u & true} |> [] (wl!h --> skip; , vc?v --> if (v == 0) { log("there!"); })
}*
end
endmodule

module DIS_periodic(tid, period):
begin
{
    t := 0; dis[tid]!; {t_dot = 1 & t < period} |> [] (complete_comp[tid]? --> {t_dot = 1 & t < period})
}*
end
endmodule

module set_valve(period, deadline):
output h, v, prior;
# procedure Compute begin
#     if h >= ub then v := 0 elif h <= lb then v := 1 else skip endif
# end

begin
# lb := 30; ub := 60; v := 1;
lb := 4.6; ub := 5.4; v := 1;
state := "wait"; prior := 2;
{
    if (state == "wait") {
        dis["set_valve"]?; cip?h;
        t := 0; c := 0; state := "ready";
    }
    else if (state == "ready") {
        reqProcessor[0]["set_valve"]!prior;
        {t_dot = 1 & t < deadline} |> [] (run[0]["set_valve"]? --> state := "running";)
        if (state == "ready") {
            exit[0]["set_valve"]! --> state := "wait";
            $
            run[0]["set_valve"]? --> state := "running";
        }
    }
    else {
        {t_dot = 1, c_dot = 1 & c < period && t < deadline} |> []
          (
          preempt[0]["set_valve"]? --> state := "ready"; ,
          complete_exec[0]["set_valve"]! -->
            pre_v := v; if (h >= ub) { v := 0; } else if (h <= lb) { v := 1; } else { skip; }
            if (pre_v == 1 && v == 0) { log("here"); }
            complete_comp["set_valve"]!;
            {t_dot = 1, c_dot = 1 & c < period && t < deadline}
            if (c >= period) { cop!v; }
            { free[0]["set_valve"]! --> state := "wait"; $ preempt[0]["set_valve"]? --> state := "wait"; }
          )
        if (state == "running") {
            preempt[0]["set_valve"]? --> state := "wait";
            $
            free[0]["set_valve"]! --> state := "wait";
        }
    }
}*
end
endmodule

module get_waterlevel(period, deadline):
output h;
# procedure Compute begin
#     skip
# end

begin
state := "wait"; prior := 1;
{
    if (state == "wait") {
        dis["get_waterlevel"]?; rip?h;
        t := 0; c := 0; state := "ready";
    }
    else if (state == "ready") {
        reqProcessor[0]["get_waterlevel"]!prior;
        {t_dot = 1 & t < deadline} |> [] (run[0]["get_waterlevel"]? --> state := "running";)
        if (state == "ready") {
            exit[0]["get_waterlevel"]! --> state := "wait";
            $
            run[0]["get_waterlevel"]? --> state := "running";
        }
    }
    else {
        {t_dot = 1, c_dot = 1 & c < period && t < deadline} |> []
          (
          preempt[0]["get_waterlevel"]? --> state := "ready"; ,
          complete_exec[0]["get_waterlevel"]! --> skip; complete_comp["get_waterlevel"]!;
            {t_dot = 1, c_dot = 1 & c < period && t < deadline}
            if (c >= period) { rop!h; }
            { free[0]["get_waterlevel"]! --> state := "wait"; $ preempt[0]["get_waterlevel"]? --> state := "wait"; }
          )
        if (state == "running") {
            preempt[0]["get_waterlevel"]? --> state := "wait";
            $
            free[0]["get_waterlevel"]! --> state := "wait";
        }
    }
}*
end
endmodule

module sensor():
begin
{ w?h; s!h; }*
end
endmodule

module actuator():
begin
{ c?v; ch_v!v; }*
end
endmodule

module s2c():
begin
{ s?h; rip!h; }*
end
endmodule

module c2a():
begin
{ cop?v; c!v; }*
end
endmodule

module w2s():
begin
{ wl?h; w!h; }*
end
endmodule

module a2w():
begin
{ ch_v?v; vc!v; }*
end
endmodule

module conn():
begin
# (rop?h; cip!h)**
rop?h;
{ rop?h --> skip; $ cip!h --> skip; }*
end
endmodule